/*
* File: app/view/Tab/UserInRoleTabViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Tab.UserInRoleTabViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tabuserinroletab',

    rolename: null,
    onButtonSearchClick: function (button, e, eOpts) {
        var text = Ext.getCmp('userinrole-search-text').getValue();
        var store = this.getGridStore();

        store.getProxy().extraParams.text = text;
        Ext.getCmp('userinrole-pagingtoolbar').moveFirst();
    },

    onButtonAddClick: function (button, e, eOpts) {
        var rowEditing = this.getView().getComponent('userinrole-grid').getPlugin('rowediting');
        rowEditing.cancelEdit();
        var store = this.getView().getComponent('userinrole-grid').getStore();
        var genId = 0;
        store.each(function (record, idx) {
            genId = record.get('Id') + 1;
        });
        //dummy data
        var rec = {
            Id: 0,
            ROLEID: '',
            USER_ID: ''
        };
        //rowEditing.getEditor(rec, 'UserId').items.items[2].enable();

        if (!this.checkInsertRecord(rec, store.data.items[0].data)) {
            store.insert(0, rec);
            rowEditing.startEdit(0, 0);
        } else {
            store.removeAt(0, 1);
        }
    },

    onButtonSaveClick: function (button, e, eOpts) {
        var store = this.getGridStore();
        store.save();
    },

    onButtonDeleteClick: function (button, e, eOpts) {
        var store = this.getGridStore();
        var selectedRecord = this.getView().getComponent('userinrole-grid').getSelectionModel().getSelection()[0];
        var indexRecord = store.indexOf(selectedRecord);
        Ext.MessageBox.confirm('Confirm', 'Confirm Delete?', function (btn) {
            if (btn == 'yes') {
                store.removeAt(indexRecord, 1);
                store.erase();
                this.getView().getComponent('userinrole-grid').view.refresh();
                store.getProxy().extraParams.text = text;
                Ext.getCmp('userinroles-pagingtoolbar').moveFirst();
            }
        }
        , this);
    },

    //Check insert dummy
    checkInsertRecord: function (rec, record) {
        return ((rec.UserId === record.UserId) && (rec.Active === record.Active) && (rec.DepCode === record.DepCode));
    },

    getGridStore: function () {

        return this.getView().getComponent('userinrole-grid').getStore();
    },
    fn: function (value, metaData, record, rowIndex, colIndex, store, view) {
        if (typeof parseInt(value, 10) === 'number') {
            return this.rolename;
        } else {
            return value;
        }
    },
    onComboBoxSelect: function (combo, record, eOpts) {
        this.rolename = combo.rawValue;
    }
});
