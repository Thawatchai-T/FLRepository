/*
* File: app/view/Tab/SetupTabViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Tab.SetupTabViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tabsetuptab',

    onButtonSearchClick11: function (button, e, eOpts) {

    },

    onTreepanelItemExpand: function (nodeinterface, eOpts) {
        //var childNodes = nodeinterface.childNodes;
        //console.log(childNodes);
        //if (childNodes.length > 0) {
        //    for (i = 0; i < childNodes.length; i++) {
        //        if (childNodes[i].data.IsLeaf) {
        //            childNodes[i].set('leaf', true);
        //        }
        //    }
        //}
    },

    //onTreepanelSelectionChange: function (model, selected, eOpts) {
    //    var editbutton = Ext.getCmp('commondata-edit-button');
    //    var addbutton = Ext.getCmp('commondata-add-button');
    //    var radiogroup = this.getView().down('radiogroup');
    //    var nameeng = this.getView().down('#eng-name');
    //    addbutton.show();
    //    editbutton.hide();
    //    if (selected[0] != undefined) {
    //        nameeng.setValue(selected[0].get('Name_Eng'));
    //        var levels = selected[0].get('Levels');
    //        switch (levels + radiogroup.getChecked()[0].inputValue) {
    //            case 1: addbutton.setText('Main Catalog');
    //                addbutton.enable();
    //                nameeng.show();
    //                break;
    //            case 2: addbutton.setText('Add District');
    //                addbutton.enable();
    //                nameeng.hide();
    //                break;
    //            case 3: addbutton.setText('Add Sub District');
    //                addbutton.enable();
    //                nameeng.hide();
    //                break;
    //            case 4: addbutton.setText('Add Sub Sub District');
    //                addbutton.enable();
    //                nameeng.hide();
    //                break;
    //            default: addbutton.setText('Add');
    //                addbutton.disable();
    //                nameeng.hide();
    //                break;
    //        }

    //        if (levels == 1)
    //            radiogroup.hide();
    //        else
    //            radiogroup.show();
    //    }
    //},

    //addClick: function (button, e, eOpts) {
    //    var treepanel = this.getView().down('treepanel');
    //    var selModel = treepanel.getSelection()[0];
    //    var target = treepanel.getSelection()[0] || treepanel.getRootNode();
    //    var inputField = this.getView().down('#new-name');
    //    var radiogroup = this.getView().down('radiogroup');
    //    var node = {
    //        Id: 9999,
    //        Name: inputField.getValue(),
    //        Levels: selModel.get('Levels') + radiogroup.getChecked()[0].inputValue,
    //        Parent_Id: null,
    //        IsLeaf: true
    //    }

    //    if (radiogroup.getChecked()[0].inputValue == 0)
    //        node.Parent_Id = selModel.get('Parent_Id');
    //    else
    //        node.Parent_Id = selModel.get('Id');

    //    var store = treepanel.store;
    //    store.insert(selModel.get('index') + 1, node);
    //    store.sync();
    //    this.onPost(node, "insert");
    //},

    //editClick: function (button, e, eOpts) {
    //    var store = this.getView().down('treepanel').getStore();
    //    var inputField = this.getView().down('#new-name').getValue();
    //    var selModel = this.getView().down('treepanel').getSelection()[0];
    //    selModel.set('Name', inputField);
    //    console.log(selModel);
    //    var data = {
    //        Id: selModel.get('Id'),
    //        Code: selModel.get('Code'),
    //        Name: inputField,
    //        Levels: selModel.get('Levels'),
    //        Parent_Id: selModel.get('Parent_Id'),
    //        IsLeaf: selModel.get('IsLeaf'),
    //        Create_Date: selModel.get('Create_Date'),
    //        Create_By: selModel.get('Create_By'),
    //        Update_Date: selModel.get('Update_Date'),
    //        Update_By: selModel.get('Update_By')
    //    }
    //    this.onPost(data, "update");
    //    //store.save();
    //    //store.sync();
    //},

    //onPost: function (data, action) {
    //    var url = 'tree/' + action;
    //    Ext.Ajax.request({
    //        url: url,
    //        method: 'post',
    //        params: data,
    //        contentType: "text/plain; charset=UTF-8",
    //        success: function (response) {
    //            //console.log(response.success);
    //            var jsonResp = Ext.util.JSON.decode(response.responseText);
    //            //console.log(jsonResp.success);
    //            if (jsonResp.success == true) {
    //                if (action == "insert")
    //                    Ext.Msg.alert("Info", "ทำการเพิ่มข้อมูลเรียบร้อยแล้ว");
    //                else if (action == "update")
    //                    Ext.Msg.alert("Info", "ทำการแก้ไขข้อมูลเรียบร้อยแล้ว");
    //                Ext.getCmp('tree-setup').getStore().load();
    //            } else {
    //                Ext.Msg.alert("Info", "notsave");

    //            }
    //        },
    //        failure: function (response) {
    //            console.log(response);
    //            var jsonResp = Ext.util.JSON.decode(response.responseText);
    //            Ext.Msg.alert("Error", jsonResp.error);
    //        }
    //    });
    //},

    onTreepanelItemContextMenu: function (dataview, record, item,
					index, e, eOpts) {
        var tree = this.getView().down('treepanel');
        var me = this.getView();
        var selModel = this.getView().down('treepanel').getSelection()[0];
        var store = this.getView().down('treepanel').getStore();
        //var setup = Ext.create('widget.windowsetupwindow');
        //console.log(selModel);

        e.stopEvent();

        if (record.get('depth') === 1) {
            Ext.create('Ext.menu.Menu', {
                items: [Ext.create('Ext.Action', {
                    iconCls: 'star',
                    text: 'AddRoot',
                    handler: function () {
                        //console.log(setup.getComponent('test').hide());
                        //console.log(selModel);
                        /**
                        hide

                        */
                        var setup = Ext.create('widget.windowsetupwindow', {
                            listeners: {
                                close: function (panel, eOpts) {
                                    //console.log('close');
                                    var refreshNode = store.getNodeById(selModel.id);
                                    refreshNode.removeAll(false);

                                    //console.log(refreshNode);

                                    store.load();
                                }
                            }

                        });
                        setup.down('form').getComponent('type').hide();
                        setup.down('form').getComponent('id').hide();
                        setup.down('form').getComponent('parent-id').hide();

                        setup.down('form').getComponent('parent-id').setValue('root');
                        setup.down('form').getComponent('id').setValue(0);
                        setup.down('form').getComponent('type').setValue("insert");

                        setup.show();
                        //console.log('after show AddRoot');


                    }
                }),
                Ext.create('Ext.Action', {
                    iconCls: 'star',
                    text: 'AddSub',
                    handler: function () {
                        //add sub id = parent_id

                        var setup = Ext.create('widget.windowsetupwindow', {
                            listeners: {
                                close: function (panel, eOpts) {

                                    var refreshNode = store.getNodeById(selModel.get('Parent_Id'));
                                    //refreshNode.removeAll(false);

                                    store.load();
                                }
                            }

                        });

                        setup.down('form').loadRecord(selModel);
                        setup.down('form').getComponent('type').hide();
                        setup.down('form').getComponent('id').hide();
                        setup.down('form').getComponent('name-eng').hide();
                        setup.down('form').getComponent('parent-id').hide();

                        setup.down('form').getComponent('type').setValue("insert");
                        var parent_id = setup.down('form').getComponent('id').getValue();

                        setup.down('form').getComponent('id').setValue(0);
                        setup.down('form').getComponent('parent-id').setValue(parent_id);
                        setup.down('form').getComponent('name').setValue('');

                        setup.show();

                    }
                }),
                Ext.create('Ext.Action', {
                    iconCls: 'star',
                    text: 'Edit',
                    handler: function () {
                        var setup = Ext.create('widget.windowsetupwindow', {
                            listeners: {
                                close: function (panel, eOpts) {
                                    //console.log('close');
                                    var refreshNode = store.getNodeById(selModel.id);
                                    refreshNode.removeAll(false);

                                    //console.log(refreshNode);

                                    store.load();

                                }
                            }

                        });

                        setup.down('form').loadRecord(selModel);
                        setup.down('form').getComponent('type').setValue("update");

                        setup.down('form').getComponent('type').hide();
                        setup.down('form').getComponent('id').hide();
                        setup.down('form').getComponent('parent-id').hide();

                        setup.show();
                    }
                })
                ]
            }).showAt(e.getXY());
        } else {

            Ext.create('Ext.menu.Menu', {
                items: [Ext.create('Ext.Action', {
                    iconCls: 'star',
                    text: 'Add',
                    handler: function () {
                        var setup = Ext.create('widget.windowsetupwindow', {
                            listeners: {
                                close: function (panel, eOpts) {
                                    
                                    var refreshNode = store.getNodeById(selModel.get('Parent_Id'));
                                    refreshNode.removeAll(false);

                                    store.load({
                                        node: refreshNode
                                    });
                                }
                            }

                        });
                        setup.down('form').loadRecord(selModel);
                        //hide
                        setup.down('form').getComponent('type').hide();
                        setup.down('form').getComponent('id').hide();
                        setup.down('form').getComponent('name-eng').hide();
                        setup.down('form').getComponent('parent-id').hide();

                        var parent_id = setup.down('form').getComponent('id').getValue();
                        setup.down('form').getComponent('type').setValue("insert");
                        setup.down('form').getComponent('id').setValue(0);
                        setup.down('form').getComponent('parent-id').setValue(parent_id);
                        setup.down('form').getComponent('name').setValue('');

                        setup.show();

                    }
                }),
                Ext.create('Ext.Action', {
                    iconCls: 'star',
                    text: 'Edit',
                    handler: function () {
                        var setup = Ext.create('widget.windowsetupwindow', {
                            listeners: {
                                close: function (panel, eOpts) {
                                    //console.log('close');
                                    var refreshNode = store.getNodeById(selModel.get('Parent_Id'));
                                    refreshNode.removeAll(false);

                                    //console.log(refreshNode);

                                    store.load({
                                        node: refreshNode
                                    });
                                }
                            }

                        });

                        //hide
                        setup.down('form').getComponent('type').hide();
                        setup.down('form').getComponent('id').hide();
                        setup.down('form').getComponent('name-eng').hide();
                        setup.down('form').getComponent('parent-id').hide();

                        setup.down('form').loadRecord(selModel);
                        setup.down('form').getComponent('type').setValue("update");
                        setup.show();

                        //console.log('menu clicked');
                    }
                }),
                Ext.create('Ext.Action', {
                    iconCls: 'star',
                    text: 'Delete',
                    handler: function () {

                        Ext.MessageBox.confirm('Confirm', 'คุณต้องการลบข้อมูล?',
                            function (cbtn, bool) {
                                if (cbtn == 'yes') {
                                    Ext.Ajax.request({
                                        url: 'tree/delete',
                                        method: 'post',
                                        params: { id: selModel.id },
                                        contentType: "text/plain; charset=UTF-8",
                                        success: function (response) {

                                            //console.log(response);
                                            Ext.Msg.alert('Success', "ลบข้อมูลเรียบร้อยแล้ว");

                                            var refreshNode = store.getNodeById(selModel.get('Parent_Id'));
                                            refreshNode.removeAll(false);
                                            store.load({
                                                node: refreshNode
                                            });

                                        },
                                        failure: function (response) {
                                            //console.log(response);
                                            var jsonResp = Ext.util.JSON.decode(response.responseText);
                                            Ext.Msg.alert("Error", jsonResp.error);
                                        }
                                    });
                                }

                            }
                         );
                    }
                })
                ]
            }).showAt(e.getXY());
        }
    },

    onLoadNodeByID: function (dataview, record, item, index, e, eOpts) {
        //get refernce to the node that needs to be reloaded to match data with the server
        refreshNode = this.getCountriesStore().getNodeById(opts.params.parentNodeId);
        //unnecessary but required here due to an ExtJS bug
        refreshNode.removeAll(false);
        //refresh(reload) the node 
        this.getCountriesStore().load({
            node: refreshNode
        });
    }
});
