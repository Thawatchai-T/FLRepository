/*
 * File: app/view/Popup/CusInfPopupViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.view.Customer.CusInfPopupViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.popupcusinfpopup',

    onButtonSearchClick: function (button, e, eOpts) {
        var me = this,
            form = this.getView().down('form').getForm(),
            store = this.getView().down('grid').getStore(),
            data = [],
            i = 0;

        store.clearFilter(true);
//        Ext.Object.each(form.findField('SearchType').getValue(), function (key, value) {
//            if (Ext.typeOf(form.findField(key).getValue()) === 'date') {
//                value = form.findField(key).getValue();
//            }

            data[i] = {
                property: me.getView().down('#SearchType').getValue().SearchType,
                value: form.findField('SearchField').getValue(),
                type: 'string'
            };

//            i++;
//        });

        store.filter(data);

        if (store.getFilters().length === 0) {
            store.load();
        }
    },

    onButtonAddClick: function (button, e, eOpts) {
        var store = this.getView().down('grid').getStore();

        Ext.create('widget.customercustomerwindow', {
            listeners: {
                afterrender: function (panel, eOpts) {
                    var form = panel.down('form').getForm(),
                        record = Ext.create('model.customer');

                    store.add(record);
                    form.loadRecord(record);
                }
            }
        }).show();
    },

    onButtonEditClick: function (button, e, eOpts) {
        var me = this,
            grid = this.getView().down('grid'),
            record = grid.getSelection()[0],
            store = Ext.getStore('customers');
            
        store.load({
            scope: this,
            params: {
                id: record.get('CustomerCode')
            },
            callback: function(records, operation, success) {
                if (record) {
                    Ext.create('widget.customercustomerwindow', {
                        listeners: {
                            afterrender: function (panel, eOpts) {
                                var form = panel.down('form').getForm();

                                form.loadRecord(records[0]);
                            }
                        }
                    }).show();
                } else {
                    Ext.Msg.show({
                        title: 'Warning',
                        message: 'กรุณาเลือกข้อมูลที่ต้องการ Edit',
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            }
        });
    },

    onItemDblClick: function (button, record, item, index, e, eOpts) {
        this.getView().close();
    },

});
