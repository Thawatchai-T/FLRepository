/*
* File: app/view/Window/CusInfWindowViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Customer.CusInfWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.windowcusinfwindow',

    onResetClick: function () {
        console.log(this);
        this.getView().reset();
    },

    onButtonAddressClick: function (button, e, eOpts) {
        var record = this.getView().down('form').getRecord();

        var popup = Ext.create("widget.commonaddresswindow", {
            listeners: {
                beforerender: function (panel, eOpts) {
                    var form = panel.down('form').getForm(),
                        store = panel.lookupReference('addressgrid').getStore();

                    form.loadRecord(record);

                    store.getProxy().extraParams.text = record.get('CustomerId');
                    store.load();
                }
            }
        }).show();
    },

    onButtonSignClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            record = form.getRecord();

        var popup = Ext.create('widget.windowsignerwindow', {
            listeners: {
                beforerender: function (panel, eOpts) {
                    var store = panel.down('gridpanel').getStore();

                    store.getProxy().extraParams.custId = record.get('CustomerId');
                    store.load();
                },
                beforeclose: function (panel, eOpts) {
                }
            }
        }).show();
    },

    onButtonContactPersonClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            record = form.getRecord();

        var popup = Ext.create('widget.windowcontactpersonwindow', {
            listeners: {
                beforerender: function (panel, eOpts) {
                    var store = panel.down('gridpanel').getStore();

                    store.getProxy().extraParams.custId = record.get('CustomerId');
                    store.load();
                },
                beforeclose: function (panel, eOpts) {
                }
            }
        }).show();
    },

    onButtonAffidavitClick: function (button, e, eOpts) {
        var popup = Ext.create("widget.commonaffidavitwindow");
        popup.show();
    },

    onButtonPowerOfAttorneyClick: function (button, e, eOpts) {
        var popup = Ext.create("widget.commonpowerofattorneywindow");
        popup.show();
    },

    onButtonMktClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm();

        var popup = Ext.create('widget.popupuserinfpopup', {
            listeners: {
                beforerender: function (panel, eOpts) {
                    panel.down('#userinf-toolbar').hide();
                },
                beforeclose: function (panel, eOpts) {
                    var selected = panel.down('grid').getSelection()[0];

                    if (selected) {
                        form.findField('MarketingOfficer').setValue(selected.get('FullNameTh'));
                    }
                }
            }
        }).show();
    },

    onUploadClick: function (button, e, eOpts) {
        var file1 = this.getView().lookupReference('upload').getComponent('file1').getValue(),
            file2 = this.getView().lookupReference('upload').getComponent('file2').getValue(),
            file3 = this.getView().lookupReference('upload').getComponent('file3').getValue(),
            form = this.lookupReference('cusinfform').getForm();

        if (file1 != '' || file2 != '' || file3 != '') {
            if (form.isValid()) {
                form.submit({
                    url: 'Home/Upload',
                    method: 'post',
                    success: function (form, action) {
                        Ext.Msg.alert('Success', action.result.message);
                    },
                    failure: function (form, action) {
                        Ext.Msg.alert('Failed', action.result ? action.result.message : 'No response');
                    }
                });
            } else {
                Ext.Msg.alert('Data is not valid!', 'กรุณาเลือกข้อมูลให้ครบถ้วน');
            }
        } else {
            Ext.Msg.alert('Data is not valid!', 'กรุณาเลือกข้อมูลที่ต้องการอัพโหลด');
        }
    },

    onRadiogroupChange: function (field, newValue, oldValue, eOpts) {
        var filefield = this.getView().down('filefield'),
            uploadbutton = this.getView().down('#upload');

        filefield.enable();
        uploadbutton.enable();

        switch (newValue.rdoupload) {
            case 'credit':
                filefield.setFieldLabel('Credit Analysis Report');
                break;
            case 'other':
                filefield.setFieldLabel('Other reports');
                break;
            case 'business':
                filefield.setFieldLabel('Business online');
                break;
            default:
                filefield.disable();
                uploadbutton.disable();
                break;
        }
    },

    onButtonNewClick1: function (button, e, eOpts) {

        var form = this.getView().down('form').getForm();
        console.log(form.getValues());
        var data = form.getValues();
        if (form.isValid()) {
            Ext.MessageBox.confirm('Confirm', 'คุณต้องการที่บันทึกหรือเปลื่ยนแปลงข้อมูล?',
                function (cbtn, bool) {
                    if (cbtn == 'yes') {

                        Ext.Ajax.request({
                            method: 'post',
                            cache: false,
                            url: 'api/cusinfo/dopost',
                            params: data,
                            contentType: "application/json",
                            success: function (form, action) {
                                Ext.Msg.alert('Success', "บันทึกข้อมูลเรียบร้อย");
                                Ext.getCmp('pagingtoolbar-custinfo').moveFirst();
                                button.up('window').close();
                            },
                            failure: function (form, action) {
                                Ext.Msg.alert('Failed', 'กรุณาตรวจสอบว่า ชื่อผู้ใช้มีอยู่ในระบบ?');
                            }
                        });

                    }

                }
            );

        } else {
            Ext.Msg.alert('Data is not valid!', 'กรุณาเลือกข้อมูลให้ครบถ้วน');
        }
    },

    onButtonResetClick: function (button, e, eOpts) {

        // this.getView().getComponent('cusinfform').getForm().reset();
    },

    onCusinfwindowBeforeRender: function (component, eOpts) {
        console.log(Ext.getBody().getViewSize().height);
        debugger;
        //Ext.getView().toggleMaximize();
        ////myWindow.toggleMaximize();

        component.setMaxHeight((Ext.getBody().getViewSize().height) - 25);
        component.setHeight((Ext.getBody().getViewSize().height) - 25);
    }

});
