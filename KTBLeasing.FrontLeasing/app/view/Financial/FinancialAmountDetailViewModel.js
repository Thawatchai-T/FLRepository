/*
 * File: app/view/Financial/FinancialAmountDetailViewModel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.view.Financial.FinancialAmountDetailViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.financialfinancialamountdetail',

    formulas: {
        CheckDown: function (get) {
            var result = true,
                store = Ext.getStore('CommonData.DownHireInsurances'),
                form = this.getView().down('form').getForm();

            if (get('DownHireInsurance')) {
                if (store.findRecord('Id', get('DownHireInsurance')).get('Code') === 'down') {
                    form.findField('DownRate').allowBlank = false;
                    result = false;
                } else {
                    form.findField('DownRate').allowBlank = true;
                    result = true;
                }
            }

            return result;
        },

        MaxAmount: function (get) {
            var store = Ext.getCmp('financialamountwindow').getViewModel().getStore('creditLimitDetails'),
                form = this.getView().down('form').getForm(),
                record = form.getRecord(),
                result;

            if (record.get('TypeLeasingCode') === 'HP') {
                result = record.get('LimitHPAmount') - (store.sum('Amount', true).HP - record.get('Amount'));
            } else if (record.get('TypeLeasingCode') === 'LEASING') {
                result = record.get('LimitLeasingAmount') - (store.sum('Amount', true).LEASING - record.get('Amount'));
            }
            
            return result;
        }
    },

    stores: {
        MainAssets: {
            model: 'TabUserInformation.model.BaseCommonData',
            proxy: {
                type: 'rest',
                url: 'api/common/GetAssetType',
                reader: {
                    type: 'json'
                }
            },
            filters: [
                function (item) {
                    return item.get('Id') == item.get('Parent_Id');
                }
            ]
        },

        SubAssets: {
            autoLoad: true,
            model: 'TabUserInformation.model.BaseCommonData',
            proxy: {
                type: 'rest',
                url: 'api/common/GetAssetType',
                reader: {
                    type: 'json'
                }
            },
            listeners: {
                filterchange: 'onStoreSubAssetsFilterChange'
            }
        },

        DetailAssets: {
            autoLoad: true,
            model: 'TabUserInformation.model.BaseCommonData',
            proxy: {
                type: 'rest',
                url: 'api/common/getEQP',
                reader: {
                    type: 'json'
                }
            },
            listeners: {
                filterchange: 'onStoreDetailAssetsFilterChange'
            }
        },

        guarantorModels: {
            model: 'TabUserInformation.model.GuarantorModel',
            session: true,
            sorters: [{
                property: 'Id',
                direction: 'ASC'
            }]
        }
    }

});