/*
 * File: app/view/Financial/FinancialAmountTabViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.view.Financial.FinancialAmountTabViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.financialfinancialamounttab',

    onComboboxMarketingGroupChange: function (field, newValue, oldValue, eOpts) {
        var form = this.getView().down('form').getForm(),
            store = form.findField('Branch').getStore();

        if (field.picker.selModel.selected.length > 0) {
            if (field.valueModels[0].get('Code') !== 'NA') {
                store.clearFilter();
                store.filterBy(function (item) {
                    if (oldValue) {
                        form.findField('Branch').setValue(null);
                    }

                    return item.get('Code') == field.valueModels[0].get('Code');
                });
            } else {
                store.clearFilter();
            }
        }
    },

    onGridpanelItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var me = this;

        var popup = Ext.create('widget.financialfinancialamountwindow', {
            listeners: {
                afterrender: function (panel, eOpts) {
                    var form = panel.down('form').getForm(),
                        storeDetail = panel.getViewModel().getStore('creditLimitDetails'),
                        storeCust = panel.getViewModel().getStore('customers'),
                        button = panel.down('#custAdd');

                    panel.down('#MasterPage').setValue(me.getView().getId());

                    form.loadRecord(record);

                    storeDetail.getProxy().extraParams.id = record.get('Id');
                    storeDetail.load();
                    storeDetail.session = false;

                    storeCust.getProxy().extraParams.id = record.get('Id');
                    storeCust.load(function (records, operation, success) {
                        if (form.findField('CustType').valueModels[0].get('Name') === 'บุคคล' && records.length > 1) {
                            button.disable();
                        } else {
                            button.enable();
                        }
                    });
                }
            }
        });
        popup.show();
    },

    onButtonAddClick: function (button, e, eOpts) {
        var me = this,
            store = me.getView().down('grid').getStore();

        Ext.create('widget.financialfinancialamountwindow', {
            listeners: {
                afterrender: function (panel, eOpts) {
                    var storeDetail = panel.getViewModel().getStore('creditLimitDetails'),
                        storeCust = panel.getViewModel().getStore('customers'),
                        record = Ext.create('model.creditapproval'),
                        form = panel.down('form').getForm();

                    panel.down('#MasterPage').setValue(me.getView().getId());

                    record.save({
                        callback: function (record, operation) {
                            record.setId(operation.getResponse().responseText);
                            record.phantom = true;

                            store.add(record);

                            form.loadRecord(record);

                            storeDetail.removeAll(true);
                            storeCust.removeAll(true);
                        }
                    });
                }
            }
        }).show();
    },

    onButtonDeleteClick: function (button, e, eOpts) {
        var grid = button.up('grid'),
            store = grid.getStore(),
            selected = grid.getSelection();

        if (selected.length > 0) {
            Ext.MessageBox.confirm({
                title: 'Delete?',
                message: 'คุณต้องการลบรายการนี้ใช่หรือไม่?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function (btn) {
                    if (btn === 'yes') {
                        selected[0].set('Active', false);
                        store.remove(selected[0]);

                        store.sync({
                            success: function (response, opertation) {
                                Ext.Msg.alert('Success!', 'Delete Success');
                                store.load();
                            },
                            failure: function (response, opertation) {
                                Ext.Msg.show({
                                    title: 'Error',
                                    message: 'Failure!',
                                    buttons: Ext.Msg.OK,
                                    icon: Ext.Msg.ERROR
                                });
                            }
                        });
                    }
                }
            });
        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาทำการเลือกรายการที่ต้องการลบ',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    },

    onButtonSearchClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            store = this.getView().down('grid').getStore(),
            data = [],
            i = 0;

        store.clearFilter(true);
        Ext.Object.each(form.getValues(), function (key, value) {
            if (Ext.typeOf(form.findField(key).getValue()) === 'date') {
                value = form.findField(key).getValue();
            }

            data[i] = {
                property: key,
                value: value,
                type: Ext.typeOf(form.findField(key).getValue())
            };

            i++;
        });

        store.filter(data);

        if (store.getFilters().length === 0) {
            store.load();
        }

    }

});
