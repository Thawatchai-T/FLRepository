/*
 * File: app/view/Financial/FinancialAmountWindowViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.view.Financial.FinancialAmountWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.financialfinancialamountwindow',

    onEditorLimitAmountAfterRender: function (panel, eOpts ) {
        var store = Ext.getStore('creditLimitCustomers'),
            form = this.getView().down('form').getForm(),
            grid = this.getView().down('grid'),
            record = grid.getSelection()[0],
            field = Ext.getCmp('editLimitAmount'),
            result;
        
        if (field) {
            result = form.findField('CreditLimit').getValue() - (store.sum('LimitAmount') - record.get('LimitAmount'));
        
            field.maxValue = result;
        }    
    },

    onGridpanelCustomerSelect: function (panel, record, index, eOpts ) {
        var store = panel.getStore(),
            form = this.getView().down('form').getForm(),
            field = Ext.getCmp('editLimitAmount'),
            result;
        
        if (field) {
            result = form.findField('CreditLimit').getValue() - (store.sum('LimitAmount') - record.get('LimitAmount'));
        
            field.maxValue = result;
        }    
    },

    fnInverseCheckDupCustomer: function () {
        var form = this.getView().down('form').getForm(),
            Id = this.getView().down('#Id').getValue(),
            store = this.getView().down('#gridCustomer').getStore();
           
        if(store.getCount() > 0) {
            if(form.findField('EndLimitDate').getValue() && form.findField('EndLimitDate').getValue() && form.findField('Limit').getValue()) {
                store.each(function(record) {
                    Ext.Ajax.request({
                        method: 'get',
                        url: 'api/CreditLimitApproval',
                        params: {
                            customer_id: record.get('CustomerId'), 
                            limit_type: form.findField('TypeCreditLimit').getValue(), 
                            start_date: form.findField('StartLimitDate').getValue(), 
                            end_date: form.findField('EndLimitDate').getValue()
                        },
                        success: function (response) {
                            var result = Ext.decode(response.responseText);
                    
                            if(result.length > 0) {
                                Ext.Array.each(result, function(item) {
                                    if(item.Id.toString() !== Id.toString()) {
                                        store.remove(record);
                                    }
                                });
                            }
                        },
        //                failure: function (response) {
        //                    Ext.Msg.show({
        //                        title: 'Warning',
        //                        message: 'กรุณาเลือก ประเภทวงเงิน วันที่เริ่มและวันที่สิ้นสุดวงเงิน ก่อนทำการเลือกลูกค้า',
        //                        buttons: Ext.Msg.OK,
        //                        icon: Ext.Msg.WARNING
        //                    });
        //                }
                    });
                });
            }
        }
    },

    onStartLimitDateSelect: function (field, value, eOpts) {
        var form = this.getView().down('form').getForm();

        if(value > form.findField('EndLimitDate').getValue())  {
            form.findField('EndLimitDate').setValue(value);
        }

        this.fnInverseCheckDupCustomer();
    },

    onEndLimitDateExpand: function (field, eOpts) {
        var form = this.getView().down('form').getForm();
        
        form.updateRecord();
        
        if (field) {
            field.setMinValue(form.findField('StartLimitDate').getValue());
        }    
    },

    onEndLimitDateSelect: function (field, value, eOpts) {
        this.onEndLimitDateExpand(field, eOpts);
        this.fnInverseCheckDupCustomer();
    },

    onComboboxTypeCreditLimitSelect: function (combo, record, eOpts) {
        this.fnInverseCheckDupCustomer();
    },

    onComboboxCustTypeChange: function (field, newValue, oldValue, eOpts) {
        var button = this.getView().down('#custAdd'),
            grid = this.getView().down('#gridCustomer'),
            store = grid.getStore();
            
        if (newValue) {
            if (field.valueModels[0].get('Name') === 'บุคคล' && store.getCount() >= 1) {
                button.disable();
                grid.down('#LimitAmount').hide();
            } else {
                button.enable();
                grid.down('#LimitAmount').show();
            }
        }
    },

    onComboboxMarketingGroupChange: function (field, newValue, oldValue, eOpts) {
        var form = this.getView().down('form').getForm(),
            store = form.findField('Branch').getStore();

        if (newValue) {
            if (field.valueModels[0].get('Code') !== 'NA') {
                store.clearFilter();
                store.filterBy(function (item) {
                    if (oldValue) {
                        form.findField('Branch').setValue(null);
                    }

                    return item.get('Code') == field.valueModels[0].get('Code');
                });
            } else {
                store.clearFilter();
            }
        }
    },

    onComboboxTypeLeasingChange: function (field, newValue, oldValue, eOpts) {
        var form = this.getView().down('form').getForm(),
            combo = form.findField('TypeLeasing'),
            fieldHP = form.findField('TypeProductHP'),
            LimitHPAmount = form.findField('LimitHPAmount'),
            fieldLease = form.findField('TypeProductLease'),
            LimitLeaseAmount = form.findField('LimitLeaseAmount');
            
        if (newValue > 0) {
            if (combo.valueModels[0].get('Code') === 'HP') {
                this.getView().down('#TypeProductHP').show();
                fieldHP.allowBlank = false;
                LimitHPAmount.allowBlank = false;

                this.getView().down('#TypeProductLease').hide();
                fieldLease.allowBlank = true;
                LimitLeaseAmount.allowBlank = false;

                if (oldValue) {
                    fieldLease.setValue(null);
                    LimitLeaseAmount.setValue(0);
                }
            } else if (combo.valueModels[0].get('Code') === 'LEASING') {
                this.getView().down('#TypeProductHP').hide();
                fieldHP.allowBlank = true;
                LimitHPAmount.allowBlank = true;

                this.getView().down('#TypeProductLease').show();
                fieldLease.allowBlank = false;
                LimitLeaseAmount.allowBlank = false;

                if (oldValue) {
                    fieldHP.setValue(null);
                    LimitHPAmount.setValue(0);
                }
            } else if (combo.valueModels[0].get('Code') === 'ALL') {
                this.getView().down('#TypeProductHP').show();
                fieldHP.allowBlank = false;
                LimitHPAmount.allowBlank = false;

                this.getView().down('#TypeProductLease').show();
                fieldLease.allowBlank = false;
                LimitLeaseAmount.allowBlank = false;
            } 
        } 
        else 
        {
            this.getView().down('#TypeProductHP').hide();
            fieldHP.allowBlank = true;
            LimitHPAmount.allowBlank = true;

            this.getView().down('#TypeProductLease').hide();
            fieldLease.allowBlank = true;
            LimitLeaseAmount.allowBlank = true;

            if (oldValue) {
                fieldHP.setValue(null);
                LimitHPAmount.setValue(0);

                fieldLease.setValue(null);
                LimitLeaseAmount.setValue(0);
            }
        }
    },
    
    fnSetControl: function (panel, formMain) {
        var form = this.getView().down('form').getForm();

        if (form.findField('Limit').valueModels[0].get('Code') === 'true') {
            formMain.findField('Amount').show();
            formMain.findField('Amount').allowBlank = false;
        } else {
            formMain.findField('Amount').hide();
            formMain.findField('Amount').allowBlank = true;
        }

        if (form.findField('TypeLeasing').valueModels[0].get('Code') !== 'HP') {
            panel.down('#ScrapValue').show();
            formMain.findField('ScrapValue').allowBlank = false;
            formMain.findField('ScrapPercent').allowBlank = false;
        } else {
            panel.down('#ScrapValue').hide();
            formMain.findField('ScrapValue').allowBlank = true;
            formMain.findField('ScrapPercent').allowBlank = true;
        }

        formMain.findField('ChequeCondition').hide();
    },

    fnDetailPopup: function (store, record) {
        var me = this;
            form = this.getView().down('form').getForm(),
            Id = form.findField('Id').getValue(),
            UserId = sessionStorage.getItem('UserId');

        Ext.create('widget.financialfinancialamountdetail', {
            listeners: {
                afterrender: function (panel, eOpts) {
                    var formMain = panel.down('#formMain').getForm(),
                        storeGua = Ext.getStore('creditLimitGuarantors'),
                        records = Ext.create('model.creditlimitdetail', {
                            Total: record.get('Total'),
                            LimitHPAmount: form.findField('LimitHPAmount').getValue(),
                            LimitLeaseAmount: form.findField('LimitLeaseAmount').getValue(),
                            TypeLeasing: record.get('TypeLeasing'),
                            CreditLimitApproval: {
                                Id: Id
                            }
                        });

                    panel.down('#MasterPage').setValue(me.getView().getId());

                    records.data.CreateBy = UserId;

                    records.save({
                        callback: function (record, operation) {
                            record.setId(operation.getResponse().responseText);
                            record.data.CreateBy = UserId;
                            record.data.CreateDate = new Date();
                            record.phantom = true;

                            store.add(record);
                            formMain.loadRecord(record);
                            
                            me.fnSetControl(panel, formMain);

                        }
                    });

                    storeGua.removeAll(true);
                }
            }
        }).show();
    },

    onButtonAddClick: function (button, e, eOpts) {
        var me = this,
            form = this.getView().down('form').getForm(),
            record = form.getRecord(),
            store = this.getView().lookupReference('gridDetail').getStore();

        form.updateRecord();

        if (form.findField('TypeLeasing').getValue()) {
            if (form.findField('TypeLeasing').valueModels[0].get('Code') === 'ALL') {
                Ext.Msg.show({
                    title: 'เลือกประเภทสินเชื่อ',
                    msg: 'Hire Purchase หรือ Leasing',
                    buttons: Ext.MessageBox.YESNOCANCEL,
                    buttonText: { yes: 'Hire Purchase', no: 'Leasing', cancel: 'Cancel' },
                    width: 350,
                    icon: Ext.MessageBox.INFO,
                    fn: function (btn) {
                        if (btn === 'yes') {
                            if(record.get('LimitHPAmount') > store.sum('Amount', true).HP || !store.sum('Amount', true).HP) {
                                record.data.TypeLeasing = form.findField('TypeLeasing').getStore().findRecord('Code', 'HP').get('Id');
                                me.fnDetailPopup(store, record);
                            } else {
                                Ext.Msg.show({
                                    title: 'Warning',
                                    message: 'ครบวงเงินแล้ว',
                                    buttons: Ext.Msg.OK,
                                    icon: Ext.Msg.WARNING
                                });
                            }
                        } else if (btn === 'no') {
                            if(record.get('LimitLeaseAmount') > store.sum('Amount', true).LEASING || !store.sum('Amount', true).LEASING) {
                                record.data.TypeLeasing = form.findField('TypeLeasing').getStore().findRecord('Code', 'LEASING').get('Id');
                                me.fnDetailPopup(store, record);
                            } else {
                                Ext.Msg.show({
                                    title: 'Warning',
                                    message: 'ครบวงเงินแล้ว',
                                    buttons: Ext.Msg.OK,
                                    icon: Ext.Msg.WARNING
                                });
                            }
                        }
                    }
                });
            } else if (form.findField('TypeLeasing').valueModels[0].get('Code') === 'HP') {
                if(record.get('LimitHPAmount') > store.sum('Amount', true).HP || !store.sum('Amount', true).HP) {
                    record.data.TypeLeasing = form.findField('TypeLeasing').getStore().findRecord('Code', 'HP').get('Id');
                    me.fnDetailPopup(store, record);
                } else {
                    Ext.Msg.show({
                        title: 'Warning',
                        message: 'ครบวงเงินแล้ว',
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            } else if (form.findField('TypeLeasing').valueModels[0].get('Code') === 'LEASING') {
                if(record.get('LimitLeaseAmount') > store.sum('Amount', true).LEASING || !store.sum('Amount', true).LEASING) {
                    record.data.TypeLeasing = form.findField('TypeLeasing').getStore().findRecord('Code', 'LEASING').get('Id');
                    me.fnDetailPopup(store, record);
                } else {
                    Ext.Msg.show({
                        title: 'Warning',
                        message: 'ครบวงเงินแล้ว',
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            }
        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาทำการเลือกประเภทผลิตภัณฑ์และวงเงินผลิตภัณฑ์ ก่อน',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    },

    onGridpanelItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var me = this,
            form = me.getView().down('form').getForm();

        Ext.create('widget.financialfinancialamountdetail', {
            listeners: {
                afterrender: function (panel, eOpts) {
                    var formMain = panel.down('#formMain').getForm(),
                        storeGua = Ext.getStore('creditLimitGuarantors'),
                        session = me.getSession();

                    panel.down('#MasterPage').setValue(me.getView().getId());

                    formMain.loadRecord(record);

                    me.fnSetControl(panel, formMain);

                    storeGua.load({
                        params: {
                            id: record.get('Id')
                        }
                    });
                }
            }
        }).show();
    },

    onButtonDeleteCustomerClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            grid = this.getView().down('#gridCustomer'),
            store = grid.getStore(),
            buttonAdd = this.getView().down('#custAdd'),
            selected = grid.getSelection();

        if (selected.length > 0) {
            Ext.MessageBox.confirm({
                title: 'Delete?',
                message: 'คุณต้องการลบรายการนี้ใช่หรือไม่?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function (btn) {
                    if (btn === 'yes') {
                        selected[0].set('Active', false);
                        store.remove(selected[0]);

                        if (form.findField('CustType').valueModels[0].get('Name') === 'บุคคล' && store.getCount() >= 1) {
                            buttonAdd.disable(); 
                            grid.down('#LimitAmount').hide();
                        } else {
                            buttonAdd.enable();
                            grid.down('#LimitAmount').show();
                        }
                    }
                }
            });
        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาทำการเลือกรายการที่ต้องการลบ',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    }, 

    onButtonDeleteClick: function (button, e, eOpts) {
        var grid = button.up('grid'),
            store = grid.getStore(),
            selected = grid.getSelection();

        if (selected.length > 0) {
            Ext.MessageBox.confirm({
                title: 'Delete?',
                message: 'คุณต้องการลบรายการนี้ใช่หรือไม่?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function (btn) {
                    if (btn === 'yes') {
                        selected[0].set('Active', false);
                        store.remove(selected[0]);

                        store.sync({
                            success: function (response, opertation) {
                                Ext.Msg.alert('Success!', 'Delete Success');
                            },
                            failure: function (response, opertation) {
                                Ext.Msg.show({
                                    title: 'Error',
                                    message: 'Failure!',
                                    buttons: Ext.Msg.OK,
                                    icon: Ext.Msg.ERROR
                                });
                            }
                        });
                    }
                }
            });
        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาทำการเลือกรายการที่ต้องการลบ',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    },

    onButtonCustomerAddClick: function (button, e, eOpts) {
        var me = this,
            formMain = me.getView().down('form').getForm(),
            gridCust = this.getView().down('#gridCustomer'),
            store = gridCust.getStore(),
            Id = this.getView().down('#Id').getValue();
      
        if (formMain.findField('CustType').getValue() > 0) {
            if (formMain.findField('CustType').valueModels[0].get('Name') === 'นิติบุคคล' && formMain.findField('CreditLimit').getValue() <= 0) {
                Ext.Msg.show({
                    title: 'Warning',
                    message: 'กรุณากรอกวงเงินที่ได้รับอนุมัติก่อน',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.WARNING
                });
            } else {
                Ext.create('widget.popupcusinfpopup', {
                    listeners: {
                        afterrender: function (panel, eOpts) {
                            var store = panel.down('grid').getStore();

                            store.load();
                        },
                        beforeclose: function (panel, e0pst) {
                            var grid = panel.down('grid'),
                                selected = grid.getSelection();
                                
                            if(selected.length > 0) {
                                var record = Ext.create('model.creditlimitcustomer', {
                                    CreditLimitApprovalId: Id,
                                    CustomerId: selected[0].get('CustomerCode'),
                                    FirstNameTh: selected[0].get('FirstNameTh'),
                                    LastNameTh: selected[0].get('LastNameTh'),
                                    TaxNo: selected[0].get('TaxNo')
                                });

                                if(!store.findRecord('CustomerId', record.get('CustomerId'))) {
                                    if(store.getRemovedRecords().length > 0) {
                                        Ext.Array.each(store.getRemovedRecords(), function(item) {
                                            if(item.get('CustomerId') === record.get('CustomerId')) {
                                                store.add(record);
                                            } 
                                            else {
                                                Ext.Ajax.request({
                                                    method: 'get',
                                                    url: 'api/CreditLimitApproval',
                                                    params: {
                                                        customer_id: record.get('CustomerId'), 
                                                        limit_type: formMain.findField('TypeCreditLimit').getValue(), 
                                                        start_date: formMain.findField('StartLimitDate').getValue(), 
                                                        end_date: formMain.findField('EndLimitDate').getValue()
                                                    },
                                                    success: function (response) {
                                                        if(Ext.decode(response.responseText).length <= 0) {
                                                            store.add(record);

                                                            if(formMain.findField('CustType').valueModels[0].get('Name') === 'บุคคล') {
                                                                button.disable();
                                                                gridCust.down('#LimitAmount').hide();
                                                            }
                                                        }else {
                                                            Ext.Msg.show({
                                                                title: 'Warning',
                                                                message: 'มีลูกค้า ประเภทวงเงิน วันที่เริ่มและวันที่สิ้นสุดวงเงิน ซ้ำในรายการอื่น',
                                                                buttons: Ext.Msg.OK,
                                                                icon: Ext.Msg.WARNING
                                                            });
                                                        }
                                                    },
                                                    failure: function (response) {
                                                        Ext.Msg.show({
                                                            title: 'Warning',
                                                            message: 'กรุณาเลือก ประเภทวงเงิน วันที่เริ่มและวันที่สิ้นสุดวงเงิน ก่อนทำการเลือกลูกค้า',
                                                            buttons: Ext.Msg.OK,
                                                            icon: Ext.Msg.WARNING
                                                        });
                                                    }
                                                });
                                            }
                                        });
                                    } else {
                                        Ext.Ajax.request({
                                            method: 'get',
                                            url: 'api/CreditLimitApproval',
                                            params: {
                                                customer_id: record.get('CustomerId'), 
                                                limit_type: formMain.findField('TypeCreditLimit').getValue(), 
                                                start_date: formMain.findField('StartLimitDate').getValue(), 
                                                end_date: formMain.findField('EndLimitDate').getValue()
                                            },
                                            success: function (response) {
                                                if(Ext.decode(response.responseText).length <= 0) {
                                                    store.add(record);

                                                    if(formMain.findField('CustType').valueModels[0].get('Name') === 'บุคคล') {
                                                        button.disable();
                                                        gridCust.down('#LimitAmount').hide();
                                                    }
                                                }else {
                                                    Ext.Msg.show({
                                                        title: 'Warning',
                                                        message: 'มีลูกค้า ประเภทวงเงิน วันที่เริ่มและวันที่สิ้นสุดวงเงิน ซ้ำในรายการอื่น',
                                                        buttons: Ext.Msg.OK,
                                                        icon: Ext.Msg.WARNING
                                                    });
                                                }
                                            },
                                            failure: function (response) {
                                                Ext.Msg.show({
                                                    title: 'Warning',
                                                    message: 'กรุณาเลือก ประเภทวงเงิน วันที่เริ่มและวันที่สิ้นสุดวงเงิน ก่อนทำการเลือกลูกค้า',
                                                    buttons: Ext.Msg.OK,
                                                    icon: Ext.Msg.WARNING
                                                });
                                            }
                                        });
                                    }
                                }else {
                                    Ext.Msg.show({
                                        title: 'Warning',
                                        message: 'มีลูกค้ารายนี้อยู่แล้ว',
                                        buttons: Ext.Msg.OK,
                                        icon: Ext.Msg.WARNING
                                    });
                                }
                            }
                        }
                    }
                }).show();
            }
        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาเลือกข้อมูลประเภทลูกค้าก่อน',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    },

    onGridpanelCustomerItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var me = this,
            formMain = me.getView().down('form').getForm(),
            store = Ext.getStore('customers');
            
        store.load({
            scope: this,
            params: {
                id: record.get('CustomerId')
            },
            callback: function(records, operation, success) {
                Ext.create('widget.customercustomerwindow', {
                    listeners: {
                        afterrender: function (panel, eOpts) {
                            var form = panel.down('form').getForm(),
                                recordCus = Ext.create('model.customer', record.get('Customer'));

                            panel.down('#MasterPage').setValue(me.getView().getId());

                            form.loadRecord(records[0]);
                        },
                        beforeclose: function (panel, eOpts) {
                            var store = Ext.getStore('creditLimitCustomers'),
                                selected = dataview.getSelection()[0],
                                recordCus = panel.down('form').getForm().getRecord();
                            
                            selected.set('FirstNameTh', recordCus.get('FirstNameTh'));
                            selected.set('LastNameTh', recordCus.get('LastNameTh'));
                            selected.set('TaxNo', recordCus.get('TaxNo'));
                        }
                    }
                }).show();
            }
        });
    },

    onButtonSaveClick: function (button, e, eOpts) {
        var me = this;

        Ext.MessageBox.confirm('Confirm', 'Confirm Save?', function (msg) {
            if (msg === 'yes') {
                me.fnSave();
            }
        });
    },

    fnSave: function() {
        var me = this,
            view = me.getView(),
            form = view.down('form').getForm(),
            record = form.getRecord(),
            gridCust = this.getView().down('#gridCustomer'),
            store = gridCust.getStore(),
            UserId = sessionStorage.getItem('UserId');

        record.phantom = false;

        form.updateRecord(record);
                
        if (form.isValid()) {
            if(store.getCount() > 0) {
                form.findField('save').setValue('Y');
                if(record.phantom === true) {
                    record.data.CreateBy = UserId;
                }else{
                    record.data.UpdateBy = UserId;
                }
                var storeApproval = Ext.getStore('creditApprovals'), 
                    storeDetail = Ext.getStore('creditLimitDetails'),
                    storeCust = Ext.getStore('creditLimitCustomers');
                    
                var storeArray = [storeApproval,storeDetail,storeCust];
            
                storeArray = me.fnAddStoreArray(storeArray);
                
                TabUserInformation.controller.WindowController.fnSaveStore(view, storeArray);
            } else {
                Ext.Msg.show({
                    title: 'Warning',
                    message: 'กรุณาเพิ่มข้อมูลลูกค้าก่อน',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.WARNING
                });
            }
        }else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรอกข้อมูลไม่ครบถ้วน',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    },

    fnAddStoreArray: function (storeArray) {
        var array = [],
            i = 0;

        Ext.Array.each(storeArray, function (store) {
            if (store.getModifiedRecords().length > 0 || store.getRemovedRecords().length > 0) {
                array[i] = store;
                i++;
            }
        });
        
        return array;
    },

    fnCopy: function () {
        var me = this,
            grid = me.getView().lookupReference('gridDetail'),
            store = grid.getStore(),
            record = grid.getSelection()[0],
            UserId = sessionStorage.getItem('UserId');

        Ext.MessageBox.confirm('Copy', 'คุณต้องการทำการ Copy ข้อมูล?', function (msg) {
            if (msg === 'yes') {
                Ext.create('widget.financialfinancialamountdetail', {
                    listeners: {
                        afterrender: function (panel, eOpts) {
                            var formMain = panel.down('#formMain').getForm();

                            record = record.copy(null);

                            record.save({
                                callback: function (record, operation) {
                                    record.setId(operation.getResponse().responseText);
                                    record.data.CreateBy = UserId;
                                    record.data.CreateDate = new Date();
                                    record.phantom = true;

                                    store.add(record);

                                    formMain.loadRecord(record);

                                    me.fnSetControl(panel, formMain);
                                }
                            });
                        }
                    }
                }).show();
            }
        });
    },

    onButtonCopyClick: function (button, e, eOpts) {
        var me = this,
            form = me.getView().down('form').getForm(),
            grid = me.getView().lookupReference('gridDetail'),
            store = grid.getStore(),
            record = grid.getSelection()[0];

        if (record) {
            if (record.get('TypeLeasingCode') === 'HP') {
                if(record.get('LimitHPAmount') > store.sum('Amount', true).HP || !store.sum('Amount', true).HP) {
                    record.data.TypeLeasing = form.findField('TypeLeasing').getStore().findRecord('Code', 'HP').get('Id');
                    me.fnCopy();
                } else {
                    Ext.Msg.show({
                        title: 'Warning',
                        message: 'ครบวงเงินแล้ว',
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            } else if (record.get('TypeLeasingCode') === 'LEASING') {
                if(record.get('LimitLeaseAmount') > store.sum('Amount', true).LEASING || !store.sum('Amount', true).LEASING) {
                    record.data.TypeLeasing = form.findField('TypeLeasing').getStore().findRecord('Code', 'LEASING').get('Id');
                    me.fnCopy();
                } else {
                    Ext.Msg.show({
                        title: 'Warning',
                        message: 'ครบวงเงินแล้ว',
                        buttons: Ext.Msg.OK,
                        icon: Ext.Msg.WARNING
                    });
                }
            }
            
        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาเลือกข้อมูลที่ต้องการ Copy',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    },

    onBeforeClose: function(panel, eOpts) {
        var me = this,
            view = me.getView(),
            form = panel.down('form').getForm(),
            record = form.getRecord();

        if (panel.closeMe) {
            panel.closeMe = false;
            return true;
        }
        
        if(form.isDirty()) {
            if (form.findField('save').getValue() === 'N') {
                Ext.Msg.show({
                    title: 'Save',
                    message: 'Save Changes?',
                    buttons: Ext.Msg.YESNOCANCEL,
                    icon: Ext.Msg.QUESTION,
                    width: 300,
                    fn: function (btn) {
                        if (btn === 'yes') {
                            Ext.MessageBox.show({
                                title: 'Please wait',
                                msg: 'Saving items...',
                                progressText: 'Saving...',
                                width: 300,
                                progress: true,
                                closable: false,
                            });

                            me.fnSave();

                        } else if (btn === 'no') {
                            if(record.phantom) // phantom true = not exist server-side
                            {
                                record.phantom = false;
                                record.set('Active', false);
                                record.drop();
                                record.save();
                            }
                            panel.closeMe = true;
                            panel.close();
                        }
                    }
                });
            }else {
                panel.closeMe = true;
                panel.close();
            }
        } else {
            if(record.phantom) // phantom true = not exist server-side
            {
                record.phantom = false;
                record.set('Active', false);
                record.drop();
                record.save();
            }
            panel.closeMe = true;
            panel.close();
        }

        return false;
    },

    onClose: function(panel, eOpts) {
        var store = Ext.getStore('creditApprovals'),
            form = panel.down('form').getForm();
        
        store.load();
    }
});
