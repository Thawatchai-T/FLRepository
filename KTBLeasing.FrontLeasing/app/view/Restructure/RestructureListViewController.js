/*
* File: app/view/Restructure/RestructureListViewController.js
*
* This file was generated by Sencha Architect version 3.2.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Restructure.RestructureListViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.restructurerestructurelist',

    onComboboxSelect: function (combo, records, eOpts) {
        var form = Ext.getCmp('head-restructure-form').getForm(),
            grid = this.getView().down('grid'),
            store = Ext.create('store.arcards'),
            storeList = grid.getStore(),
            buttonARCard = this.getView().down('button'),
            UserData = Ext.decode(sessionStorage.getItem('UserData'));

        store.getProxy().extraParams.CusCode = combo.getStore().findRecord('AgrCode', combo.value).get('CusCode');

        buttonARCard.disable();

        Ext.MessageBox.show({
            msg: 'Loading your data, please wait...',
            progressText: 'Loading...',
            width: 300,
            closable: false,
            progress: true,
            wait: {
                interval: 200
            }
        });

        store.load(function (records, operation, success) {
            if (success) {
                //if (UserData.RoleName === 'marketing') {
                storeList.getProxy().extraParams.agrcode = combo.value;
                storeList.getProxy().extraParams.marketing_group = UserData.UserInfo.MarketingGroup.Id;
                storeList.load();
                grid.view.refresh();
                //}

                //sessionStorage.setItem('dataRestructure', Ext.encode(records[0].data));

                form.findField('Customer').setValue(records[0].get('NameTh'));

                buttonARCard.enable();

                Ext.MessageBox.hide();
            } else {
                Ext.MessageBox.hide();
                Ext.MessageBox.alert("Error", "Request Timeout Please try again.");
            }
        });
    },

    onComboboxChange: function (combo, newValue, oldValue, eOpts) {
        var view = this.getView(),
            store = view.down('grid').getStore(),
            form = view.down('form').getForm(),
            buttonARCard = view.down('button');

        if (newValue === '') {
            form.findField('Agreement').setValue('');
            form.findField('Customer').setValue('');
            buttonARCard.disable();

            store.getProxy().extraParams.agrcode = {};
            store.load();
        }
    },

    onButtonARCardClick: function (button, e, eOpts) {
        var formHead = Ext.getCmp('head-restructure-form').getForm(),
            grid = this.getView().down('grid'),
            data = Ext.decode(sessionStorage.getItem('dataRestructure')),
            record = Ext.create("model.arcard", data),
            storeList = grid.getStore(),
            store = Ext.create('store.arcards');

        formHead.updateRecord(record);

        var SEQ = storeList.totalCount + 1;

        store.getProxy().extraParams.agrcode = formHead.findField('Agreement').getValue();
        store.getProxy().extraParams.date = formHead.findField('RestructureDate').getValue();
        store.load(function (records, operation, success) {
            Ext.create('widget.restructurearcard', {
                listeners: {
                    beforerender: function (panel, eOpts) {
                        var form = panel.down('form').getForm();

                        form.loadRecord(records[0]);
                        form.findField('Customer').setValue(formHead.findField('Customer').getValue());
                        form.findField('RestructureDate').setValue(formHead.findField('RestructureDate').getValue());
                        form.findField('NewFirstDueDate').setValue(Ext.Date.add(formHead.findField('RestructureDate').getValue(), Ext.Date.MONTH, 1));
                        form.findField('SEQ').setValue(SEQ);
                    }
                }
            }).show();
        });
    },

    onCopyClick: function (button, e, eOpts) {
        var grid = this.getView().down('grid'),
            store = grid.getStore(),
            storeArcards = Ext.create('store.arcards'),
            record = grid.getSelection()[0],
            form = Ext.getCmp('head-restructure-form').getForm(),
            UserData = Ext.decode(sessionStorage.getItem('UserData'));

        if (record) {
            Ext.MessageBox.prompt('Copy', 'Enter New Agreement:', function (btn, value) {
                if (btn == 'ok') {
                    storeArcards.getProxy().setUrl('api/ARCard/GetFindAgrcode');
                    storeArcards.getProxy().extraParams.agrcode = value;
                    storeArcards.getProxy().extraParams.date = record.get('RestructureDate');
                    storeArcards.load(function (records, operation, success) {
                        if (records[0].get('Agreement') !== null) {
                            sessionStorage.setItem('dataRestructure', Ext.encode(record.data));

                            Ext.create('widget.restructurerestructurewindow', {
                                listeners: {
                                    beforerender: function (panel, event) {
                                        var form = panel.down('form').getForm();

                                        form.loadRecord(record);

                                        form.findField('Res_Id').setValue(record.get('Id'));
                                        form.findField('EffectiveRate').setValue(record.get('EffectiveRate'));
                                        form.findField('Agreement').setValue(value);
                                        form.findField('Customer').setValue(records[0].get('Customer'));
                                        if (record.get('New_OS_PR') > 0) {
                                            form.findField('NewCheck').setValue(true);
                                        }

                                        form.findField('flag').setValue('copy');
                                        form.findField('CopyAgreement').setValue(record.get('Agreement'));
                                        store.getProxy().extraParams.user_id = UserData.UserId;
                                        store.getProxy().extraParams.user_group = UserData.RoleName;
                                        store.getProxy().extraParams.agrcode = value;
                                        store.load(function (records, operation, success) {
                                            var SEQ = this.totalCount + 1;
                                            form.findField('SEQ').setValue(SEQ);
                                        });
                                    },
                                    close: function (panel, event) {
                                        form.findField('Agreement').setValue(value);
                                        //Ext.getCmp('restructurerestructurelist').down('pagingtoolbar').moveLast();
                                        store.load();
                                    }
                                }
                            }).show();
                        } else {
                            Ext.Msg.show({
                                title: 'Error',
                                message: 'ไม่พบเลขที่สัญญา',
                                buttons: Ext.Msg.OK,
                                icon: Ext.Msg.ERROR
                            });
                        }
                    });
                }
            }, this);
        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาเลือกข้อมูลที่ต้องการ Copy',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    },

    onViewItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var view = this.getView(),
            grid = view.down('grid'),
        UserData = Ext.decode(sessionStorage.getItem('UserData'));

        Ext.create('widget.restructurerestructurewindow', {
            listeners: {
                beforerender: function (panel, event) {
                    var form = panel.down('form').getForm(),
                        grid = panel.down('grid');

                    form.loadRecord(record);

                    form.findField('Res_Id').setValue(record.get('Id'));
                    form.findField('EffectiveRate').setValue(record.get('EffectiveRate'));
                    form.findField('Rate').setValue('false');
                    sessionStorage.setItem('dataRestructure', Ext.encode(record.data));

                    if ((UserData.RoleName === 'head_marketing' || UserData.RoleName === 'admin_mkt') && record.get('Status') !== 'approve') {
                        panel.down('#saveButton').setText('Approve');

                        if (record.get('New_OS_PR') > 0) {
                            form.findField('NewCheck').setValue(true);
                        }

                        form.findField('flag').setValue('approve');
                    } else if ((UserData.RoleName === 'head_marketing' || UserData.RoleName === 'admin_mkt') && record.get('Status') === 'approve') {
                        if (record.get('New_OS_PR') > 0) {
                            form.findField('NewCheck').setValue(true);
                        }

                        form.findField('flag').setValue('approve');

                        panel.down('#releaseButton').show();
                        if (record.get('Release')) {
                            panel.down('#releaseButton').disable();
                        } else {
                            panel.down('#releaseButton').enable();
                        }
                    } else {
                        panel.down('#calculateEffectiveRateButton').disable();
                        panel.down('#calculateButton').disable();
                        panel.down('#saveButton').disable();
                        grid.getPlugin('celledit').disable();
                        form.findField('flag').setValue('old');
                    }
                }
            }
        }).show();
    },

    onBeforeRender: function (component, eOpts) {
        var UserData = Ext.decode(sessionStorage.getItem('UserData'));

        if ((UserData.RoleName === 'head_marketing' || UserData.RoleName === 'admin_mkt')) {
            //this.lookupReference('restructure-toolbar').hide();
            //Ext.getCmp('head-restructure-form').hide();
            this.getView().down('grid').setTitle('Restructure List (Approve)');
            this.getView().down('#Status').readOnly = true;
            this.getView().down('#SEQ').hide();
            this.getView().down('#RowNumber').show();
        }
    },

    onAfterRender: function (component, eOpts) {
        component.down('form').getForm().findField('Agreement').focus();
    },

    onStoreBeforeLoad: function (store, operation, eOpts) {
        var UserData = Ext.decode(sessionStorage.getItem('UserData'));

        store.getProxy().extraParams.user_id = UserData.UserId;
        store.getProxy().extraParams.user_group = UserData.RoleName;
        store.getProxy().extraParams.marketing_group = UserData.UserInfo.MarketingGroup.Id;
    }
});
