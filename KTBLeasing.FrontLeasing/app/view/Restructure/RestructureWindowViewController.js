/*
* File: app/view/Restructure/RestructureWindowViewController.js
*
* This file was generated by Sencha Architect version 3.2.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Restructure.RestructureWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.restructurerestructurewindow',

    statics: {
        C1: function (NewFlatRate, NewTerm, OS_PR) {
            //            var NewFlatRate = record.get('NewFlatRate'),
            //            NewTerm = record.get('NewTerm'),
            //            OS_PR = record.get('OS_PR');

            var result = ((OS_PR * (NewFlatRate / 100) * (NewTerm / 12)) + OS_PR) / NewTerm;

            return Ext.util.Format.round(result, 2);
        }
    },

    C2: function (record) {
        var dt = Ext.Date.add(record.get('NewFirstDueDate'), Ext.Date.MONTH, 1),
            subsequentDueDay = Ext.String.leftPad(record.get('SubsequentDueDay'), 2, '0'),
            date = subsequentDueDay + Ext.Date.format(dt, '/m/Y'),
            result = Ext.Date.parse(date, 'd/m/Y');

        if (subsequentDueDay != Ext.Date.format(result, 'd')) {
            result = Ext.Date.getLastDateOfMonth(dt, Ext.Date.MONTH, -1);
        }

        return result;
    },

    C2addMonth: function (previousDate, subsequentDueDay) {
        var diff = subsequentDueDay - Ext.Date.format(previousDate, 'd');


        switch (subsequentDueDay) {
            case 31:
                date = Ext.Date.getLastDateOfMonth(Ext.Date.add(previousDate, Ext.Date.MONTH, 1));
                break;
            case 30:
            case 29:
                if (Ext.Date.format(previousDate, 'm') == '02') {
                    date = Ext.Date.add(Ext.Date.add(previousDate, Ext.Date.MONTH, 1), Ext.Date.DAY, diff);
                }
                else {
                    if (Ext.Date.format(previousDate, 'd') != subsequentDueDay) {
                        date = Ext.Date.add(Ext.Date.add(previousDate, Ext.Date.MONTH, 1), Ext.Date.DAY, diff);
                    } else {
                        date = Ext.Date.add(previousDate, Ext.Date.MONTH, 1);
                    }
                }
                break;
            default:
                date = Ext.Date.add(previousDate, Ext.Date.MONTH, 1);
                break;
        }

        return date;
    },

    //Interest
    C3: function (record, InstallNo, OS_PR, EffectiveRate) {
        var RestructureMonth = Ext.Date.format(record.get('RestructureDate'), 'm/Y'),
            NewFirstDueMonth = Ext.Date.format(record.get('NewFirstDueDate'), 'm/Y'),
            monthDiff;

        var diffDay = Ext.Date.diff(record.get('RestructureDate'),record.get('NewFirstDueDate'),Ext.Date.DAY);
        var countDayByMonth = Ext.Date.diff(Ext.Date.getFirstDateOfMonth(record.get('RestructureDate')),Ext.Date.getLastDateOfMonth(record.get('RestructureDate')),Ext.Date.DAY);

        if (InstallNo === 1 && diffDay <= 0) {
            monthDiff = 0;
        } else {
            monthDiff = 1;
        }

        var result = OS_PR * (EffectiveRate / 100) * (monthDiff / 12);

        return Ext.util.Format.round(result, 2);
    },

    C4: function (C1, C3) {
        var result = C1 - C3;

        return Ext.util.Format.round(result, 2);
    },

    CalOSPR: function (OS_PR, C4) {
        var result = OS_PR - C4;

        return Ext.util.Format.round(result, 2);
    },

    VAT: function (value) {
        return Ext.util.Format.round(value * 0.07, 2);
    },

    fnGetDataInstallment: function() {
        var grid = this.getView().down('grid'),
            form = this.getView().down('form').getForm(),
            store = this.getStore('installments'),
            data = [],
            dataInstallment = [],
            dataPenalty = [];

        store.data.each(function (record, index) {
            var RestructureMonth = Ext.Date.format(record.get('RestructureDate'), 'm/Y'),
                NewFirstDueMonth = Ext.Date.format(record.get('NewFirstDueDate'), 'm/Y');

            var diffDay = Ext.Date.diff(record.get('RestructureDate'),record.get('NewFirstDueDate'),Ext.Date.DAY);

            if (diffDay <= 0) {
                if (index > 0) {
                    data[index - 1] = (index == 1) ? record.get('OS_PR') * -1 : record.get('InstallmentBeforeVAT');
                }
            } else {
                data[index] = (index == 0) ? record.get('OS_PR') * -1 : record.get('InstallmentBeforeVAT');
            }

            dataInstallment[index] = (index == 0) ? record.get('OS_PR') * -1 : record.get('InstallmentBeforeVAT');
            dataPenalty[index] = (index == 0) ? 0.00 : record.get('Penalty');
        });

        sessionStorage.setItem('dataInstallment', Ext.encode(dataInstallment));
        sessionStorage.setItem('dataPenalty', Ext.encode(dataPenalty));

        return data;
    },

    fnSave: function() {
        var view = this.getView(),
            form = this.getView().down('form').getForm(),
            store = this.getStore('installments'),
            recordLists = Ext.create('model.restructurelist'),
            me = this,
            UserData = Ext.decode(sessionStorage.getItem('UserData'));

        form.updateRecord(recordLists);

        if(form.findField('flag').getValue() === 'approve' || form.findField('flag').getValue() === 'new_approve'){
            recordLists.data.Status = 'approve';
            recordLists.data.ApproveBy = sessionStorage.getItem('UserId');
            recordLists.data.ApproveDate = new Date();
            recordLists.data.EffectiveRate = form.findField('EffectiveRate').getValue();
            recordLists.data.CreateBy =  form.findField('CreateBy').getValue();
            recordLists.data.UpdateBy = sessionStorage.getItem('UserId');
        }else{
            recordLists.data.Id = 0;
            recordLists.data.Agreement = form.findField('Agreement').getValue();
            recordLists.data.SEQ = form.findField('SEQ').getValue();
            if(UserData.RoleName === 'marketing'){
                recordLists.data.Status = 'normal';
            }else{
                recordLists.data.Status = 'pending';
            }
            recordLists.data.CreateBy = sessionStorage.getItem('UserId');
            recordLists.data.CreateDate = new Date();
        }

        Ext.Ajax.request({
            method: 'post',
            url: 'api/Restructure/Post',
            params: recordLists.data,
            success: function (response) {
                store.data.each(function (record, index) {
                    var i = index + 1;

                    record.data.Res_Id = response.responseText;
                    record.data.SEQ = form.findField('SEQ').getValue();
                    record.data.Agreement = form.findField('Agreement').getValue();

                    if(form.findField('flag').getValue() === 'approve' || form.findField('flag').getValue() === 'new_approve'){
                        record.data.UpdateBy = sessionStorage.getItem('UserId');
                    } else {
                        record.data.CreateBy = sessionStorage.getItem('UserId');
                        record.data.CreateDate = new Date();
                    }

                    if(form.findField('CopyAgreement').getValue())
                    {
                        record.data.Id = 0;
                    }

                    Ext.Ajax.request({
                        method: 'post',
                        url: 'api/Installment/Post',
                        params: record.data,
                        success: function (response) {
                            me.fnProgress(i,store.data.length);

                            if(i === store.data.length){
                                Ext.MessageBox.hide();
                                Ext.MessageBox.alert("Result", "Successful.");
                                form.findField('save').setValue('Y');
                                view.close();
                            }
                        },
                        failure: function (response) {
                            Ext.MessageBox.hide();
                            Ext.MessageBox.alert("Error", response.responseText);
                        }
                    });
                });
            },
            failure: function (response) {
                Ext.MessageBox.hide();
                Ext.MessageBox.alert("Error", response.responseText);
            }
        });
    },

    fnProgress: function (i, length) {
        if (i === length) {
            Ext.MessageBox.hide();
        } else {
            var val = i / (length - 1);
            Ext.MessageBox.updateProgress(val, Math.round(100 * val) + '% completed');
        }
    },

    onButtonCalculateClick: function (button, e, eOpts) {
        var grid = this.getView().down('grid'),
            form = this.getView().down('form').getForm(),
            store = this.getStore('installments');

        var data = this.fnGetDataInstallment();

        //C5 Calculate EffectiveRate
        Ext.Ajax.request({
            method: 'post',
            url: 'api/installment/PostEffectiveRate',
            jsonData: data,
            success: function (response) {
                form.findField('EffectiveRate').setValue(response.responseText);
                form.findField('Rate').setValue('false');

                store.load();
                grid.view.refresh();
            },
            failure: function (response) {
                Ext.Msg.show({
                    title:'Error',
                    message: 'ไม่สามารถคำนวณ Effective Rate ได้โปรดกรอกข้อมูลให้ถูกต้อง.',
                    buttons: Ext.Msg.OK,
                    icon: Ext.Msg.ERROR
                });
            }
        });
    },

    onButtonCalculateEffectiveRateClick: function (button, e, eOpts) {
        var grid = this.getView().down('grid'),
            form = this.getView().down('form').getForm(),
            store = this.getStore('installments');

        this.fnGetDataInstallment();

        form.findField('Rate').setValue('false');
        store.load();
        grid.view.refresh();
    },
    
    onButtonEffClick: function (button, e, eOpts) {
        var grid = this.getView().down('grid'),
            form = this.getView().down('form').getForm(),
            store = this.getStore('installments'),
            dataInstallment = [],
            OSPR;

        if (form.findField('NewCheck').checked) {
            OSPR = 'New_OS_PR';
        } else {
            OSPR = 'OS_PR';
        }

        //C5 Calculate PmtRate
        Ext.Ajax.request({
            method: 'get',
            url: 'api/installment/GetPmtRate',
            params: {
                Rate: form.findField('EffectiveRate').getValue(),
                NPer: form.findField('NewTerm').getValue(),
                PV: form.findField(OSPR).getValue()
            },
            success: function (response) {
                for (i = 0; i <= form.findField('NewTerm').getValue(); i++) {
                    if (i == 0) {
                        dataInstallment[i] = form.findField(OSPR).getValue() * -1;
                    }
                    else {
                        dataInstallment[i] = response.responseText;
                    }
                }

                sessionStorage.setItem('dataInstallment', Ext.encode(dataInstallment));

                form.findField('Rate').setValue('true');
                store.load();
                grid.view.refresh();
            },
            failure: function (response) {
                Ext.MessageBox.alert('Error', 'ไม่สามารถคำนวณค่า 0 ได้');
            }
        });
    },

    onButtonSaveClick: function (button, e, eOpts) {
        var me = this,
            form = this.getView().down('form').getForm(),
            store = this.getStore('installments');

        if(store.getUpdatedRecords().length > 0){
            Ext.Msg.show({
                title:'Warning',
                message: 'กรุณากดปุ่ม Calculate ก่อนทำการบันทึกข้อมูล.',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }else{
            Ext.MessageBox.confirm('Confirm', (form.findField('flag').getValue() === 'new_approve') ? 'Confirm Approve?' : 'Confirm Save?',
                function (msg) {
                    if (msg === 'yes') {
                    Ext.MessageBox.show({
                        title: 'Please wait',
                        msg: 'Saving items...',
                        progressText: 'Saving...',
                        width: 300,
                        progress: true,
                        closable: false,
                    });

                    me.fnSave();
                }
            }, this);
        }
    },

    onButtonPrintClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            store = this.getStore('installments'),
            record = Ext.create('model.restructurelist'),
            data = [];

        if(store.getUpdatedRecords().length > 0){
            Ext.Msg.show({
                title:'Warning',
                message: 'กรุณากดปุ่ม Calculate ก่อนทำการออก Excel.',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }else{
            form.updateRecord(record);

            store.data.each(function (record, index) {
                data[index] = record.data;
            });

            Ext.Ajax.request({
                method: 'post',
                url: 'Report/SSRSReport',
                jsonData: {
                    list: data,
                    entity: record.data
                },
                success: function (response) {
                    var data = Ext.decode(response.responseText);
                    window.open(data.url);
                },
                failure: function (response) {
                }
            });
        }
    },

    onButtonReleaseClick: function (button, e, eOpts) {
        var grid = Ext.getCmp('restructurerestructurelist').down('grid'),
            store = grid.getStore(),
            record = grid.getSelection()[0];

        Ext.MessageBox.show({
            title: 'Please wait',
            msg: 'Release items...',
            progressText: 'Release...',
            width: 300,
            progress: true,
            closable: false,
        });

        Ext.Ajax.request({
            method: 'get',
            url: 'api/Restructure/GetRelease',
            params:{
                id: record.get('Id')
            },
            success: function (response) {
                var result = Ext.decode(response.responseText);

                if(result.Status){
                    record.set('Release', true);

                    store.sync({
                        success: function (response) {
                            button.disable();
                            Ext.MessageBox.hide();
                            Ext.MessageBox.alert("Result", "Release Complete.");
                        },
                        failure: function (response) {
                            Ext.MessageBox.hide();
                            Ext.MessageBox.alert("Result", "Release Failure.");
                        }
                    });
                }else{
                    Ext.MessageBox.hide();
                    Ext.MessageBox.alert("Failure", "Get Release Failure.");
                }
            },
            failure: function (response) {
                Ext.MessageBox.hide();
                Ext.MessageBox.alert("Failure", "Get Release Failure.");
            }
        });
    },

    onStoreLoad: function (store, records, successful, eOpts) {
        var form = this.getView().down('form').getForm(),
            Agreement = form.findField('Agreement').getValue(),
            EffectiveRate = form.findField('EffectiveRate').getValue(),
            data = Ext.decode(sessionStorage.getItem('dataRestructure')),
            recordRestructures = Ext.create("model.restructurelist", data),
            dataInstallment = Ext.decode(sessionStorage.getItem('dataInstallment')),
            dataPenalty = Ext.decode(sessionStorage.getItem('dataPenalty'));
            
        var NewFlatRate = recordRestructures.get('NewFlatRate'),
            NewTerm = recordRestructures.get('NewTerm');

        var checkNew = form.findField('flag').getValue();

        var OSPR = null;

        if (checkNew === 'new' || checkNew === 'new_approve') {
            store.removeAll();

            if (store.data.length === 0) {
                for (i = 0; i <= NewTerm; i++) {
                    var record = null,
                        date = new Date(),
                        VAT,C1,C3,C4,OS_PR,Penalty;

                    if (i > 0) {
                        if (dataInstallment !== null) {
                             C1 = parseFloat(dataInstallment[i]);
                        } else {
                             C1 = TabUserInformation.view.Restructure.RestructureWindowViewController.C1(NewFlatRate, NewTerm, recordRestructures.get(OSPR));
                             
                        }

                        if(dataPenalty !== null){
                            Penalty = parseFloat(dataPenalty[i]);
                        }else{
                            Penalty = 0.00;
                        }

                        //VAT = this.VAT(C1);
                        C3 = this.C3(recordRestructures, i, store.findRecord('InstallNo', i - 1).get('OS_PR'), EffectiveRate);
                        C4 = this.C4(C1, C3);
                        OS_PR = this.CalOSPR(store.findRecord('InstallNo', i - 1).get('OS_PR'), C4);
                    }

                    if(i === NewTerm && OS_PR !== 0.00 && form.findField('Rate').getValue() === 'false'){
                        C1 = Ext.util.Format.round(C1 + OS_PR, 2);
                        //VAT = this.VAT(C1);
                        C3 = this.C3(recordRestructures, i, store.findRecord('InstallNo', i - 1).get('OS_PR'), EffectiveRate);
                        C4 = this.C4(C1, C3);
                        OS_PR = this.CalOSPR(store.findRecord('InstallNo', i - 1).get('OS_PR'), C4);
                    }

                    switch (i) {
                        case 0:
                            if(form.findField('NewCheck').getValue() === 'true'){
                                OSPR = 'New_OS_PR';
                            }else{
                                OSPR = 'OS_PR';
                            }
                            OS_PR = recordRestructures.get(OSPR);
                            date = recordRestructures.get('RestructureDate');
                            break;
                        case 1:
                            date = recordRestructures.get('NewFirstDueDate');
                            break;
                        case 2:
                            date = this.C2(recordRestructures);
                            break;
                        default:
                            date = this.C2addMonth(store.findRecord('InstallNo', i - 1).get('InstallmentDate'), recordRestructures.get('SubsequentDueDay'));
                            break;
                    }

                    record = Ext.create('model.installment', {
                        Agreement: Agreement,
                        InstallNo: i,
                        InstallmentDate: date,
                        InstallmentBeforeVAT: C1,
                        //VAT: VAT,
                        //Total: Ext.util.Format.round(C1 + VAT, 2),
                        //Principle: C4,
                        Interest: C3,
                        OS_PR: OS_PR,
                        Penalty: Penalty
                    });

                    if(checkNew === 'new_approve'){
                        record.data.Id = records[i].get('Id');
                    }

                    store.add(record);
                    
                    if (i === NewTerm) {
                        Ext.MessageBox.hide();
                    }
                }
            }
        }else if(checkNew === 'copy' ){
            form.findField('flag').setValue('new');
            Ext.MessageBox.hide();
        }else if(checkNew === 'approve' ){
            form.findField('flag').setValue('new_approve');
            Ext.MessageBox.hide();
        }else{
            Ext.MessageBox.hide();
        }

        store.commitChanges();
    },

    onStoreBeforeLoad: function (store, operation, eOpts) {
        var form = this.getView().down('form').getForm(),
            checkNew = form.findField('flag').getValue();

        if (checkNew === 'old' || checkNew === 'approve') {
            store.getProxy().extraParams.Res_Id = form.findField('Res_Id').getValue();
        }else if(checkNew  === 'copy') {
            store.getProxy().extraParams.Res_Id = form.findField('Res_Id').getValue();
        }

        Ext.MessageBox.show({
            title: 'Please wait',
            msg: 'Loading items...',
            progressText: 'Loading...',
            width: 300,
            progress: true,
            closable: false
        });
    },

    onBeforeClose: function(panel, eOpts) {
        var me = this,
            form = this.getView().down('form').getForm(),
            store = panel.down('grid').getStore();

        if (panel.closeMe) {
            panel.closeMe = false;
            return true;
        }

        if (form.findField('flag').getValue() !== 'old' && form.findField('save').getValue() === 'N') {
            Ext.Msg.show({
                title: (form.findField('flag').getValue() === 'new_approve') ? 'Approve' : 'Save',
                message: (form.findField('flag').getValue() === 'new_approve') ? 'Save Approve?' : 'Save Changes?',
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                width: 300,
                fn: function (btn) {
                    if (btn === 'yes') {
                        Ext.MessageBox.show({
                            title: 'Please wait',
                            msg: 'Saving items...',
                            progressText: 'Saving...',
                            width: 300,
                            progress: true,
                            closable: false,
                        });

                        me.fnSave();

                    } else if (btn === 'no') {
                        panel.closeMe = true;
                        panel.close();
                    }
                }
            });
        } else {
            panel.closeMe = true;
            panel.close();
        }

        return false;
    },

    onClose: function(panel, eOpts) {
        sessionStorage.removeItem('dataInstallment');
        sessionStorage.removeItem('dataPenalty');
        Ext.getCmp('restructurerestructurelist').down('grid').getStore().load();
    }
});
