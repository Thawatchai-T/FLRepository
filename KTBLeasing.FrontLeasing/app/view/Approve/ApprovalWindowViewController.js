/*
 * File: app/view/Approve/ApprovalWindowViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.view.Approve.ApprovalWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.approveapprovalwindow',

    onGridpanelSelectionChange: function (model, selected, eOpts) {
        var form = this.getView().down('form').getForm(),
            grid = this.getView().down('grid'),
            store = grid.getStore();

        if (selected.length > 0) {
            form.loadRecord(selected[0]);

            if (selected[0].get('Id') !== store.getAt(store.getCount() - 1).get('Id')) {
                Ext.Array.each(form.getFields().items, function (field, index) {
                    field.setReadOnly(true);
                });
            } else {
                Ext.Array.each(form.getFields().items, function (field, index) {
                    field.setReadOnly(false);
                });
            }
        }
    },

    onGridpanelDeselect: function (rowmodel, record, index, eOpts) {
        var form = this.getView().down('form').getForm();

        form.updateRecord(record);
    },

    onButtonNewClick: function (button, e, eOpts) {
        var grid = this.getView().down('grid'),
            form = this.getView().down('form').getForm(),
            store = grid.getStore(),
            InformationId = this.getView().down('#InformationId').getValue(),
            record = Ext.create('model.approval', {
                InformationId: InformationId
            });

        if (store.getModifiedRecords().length === 0) {
            store.add(record);
            grid.getView().setSelection(record);
            form.reset();
        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาบันทึกข้อมูลก่อนทำการเพิ่ม',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }

    },

    onButtonSaveClick: function (button, e, eOpts) {
        var view = this.getView(),
            form = view.down('form').getForm(),
            store = view.down('grid').getStore(),
            record = form.getRecord();

        Ext.Msg.show({
            title: 'Save Changes?',
            message: 'คุณต้องการบันทึกข้อมูลหรือไม่?',
            buttons: Ext.Msg.YESNO,
            icon: Ext.Msg.QUESTION,
            fn: function (btn) {
                if (btn === 'yes') {
                    if (form.isValid()) {
                        form.updateRecord(record);

                        store.sync({
                            success: function (batch) {
                                store.load();
                            },
                            failed: function (batch) {
                            }
                        });

                    } else {
                        Ext.MessageBox.alert('Warning', 'กรอกข้อมูลไม่ครบถ้วน');
                    }
                } else {
                }
            }
        });
    },

    onButtonDeleteClick: function (button, e, eOpts) {
        var grid = this.getView().down('grid'),
            form = this.getView().down('form').getForm(),
            store = grid.getStore(),
            selected = grid.getSelection();

        if (selected.length > 0) {
            if (selected[0].get('Id') === store.getAt(store.getCount() - 1).get('Id')) {
                Ext.Msg.show({
                    title: 'Delete?',
                    message: 'คุณต้องการลบข้อมูลหรือไม่?',
                    buttons: Ext.Msg.YESNO,
                    icon: Ext.Msg.QUESTION,
                    fn: function (btn) {
                        if (btn === 'yes') {
                            store.remove(selected[0]);

                            store.sync({
                                success: function (batch) {
                                    store.load();
                                },
                                failed: function (batch) {
                                }
                            });
                        }
                    }
                });
            }

        } else {
            Ext.Msg.show({
                title: 'Warning',
                message: 'กรุณาเลือกข้อมูลที่จะทำการลบ',
                buttons: Ext.Msg.OK,
                icon: Ext.Msg.WARNING
            });
        }
    },

    onWindowBeforeClose: function (panel, eOpts) {
        var view = this.getView(),
            form = view.down('form').getForm(),
            grid = view.down('grid'),
            store = grid.getStore(),
            selected = grid.getSelectionModel().getSelection();

        if (view.closeMe) {
            view.closeMe = false;
            return true;
        }

        if (selected[0]) {
            form.updateRecord(selected[0]);
        }

        if (store.getModifiedRecords().length > 0) {
            Ext.MessageBox.show({
                title: 'Save Changes?',
                message: 'คุณต้องการบันทึกข้อมูลหรือไม่?',
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                width: 300,
                fn: function (btn) {
                    if (btn === 'yes') {
                        store.sync({
                            success: function (batch) {

                            },
                            failed: function (batch) {

                            }
                        });
                        view.close();
                        view.closeMe = true;
                    } else if (btn === 'no') {
                        view.close();
                        view.closeMe = true;
                    } else {
                    }
                }
            });

            return false;
        }

    },

    onWindowClose: function (panel, eOpts) {
        var store = panel.down('grid').getStore();

        store.load();
    }

});
