/*
* File: app/view/Tab/AuthorizeTabViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Authorize.AuthorizeTabViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.tabauthorizetab',

    rec: {
        UserId: '',
        Active: false,
        DepCode: ''
    },

    onButtonSearchClick: function (button, e, eOpts) {

        var text = Ext.getCmp('search-text').getValue();
        var store = this.getGridStore();

        if (text) {
            store.load({
                params: {
                    text: text
                }
            });
        } else {
            store.reload({
                params: {}
            });
        }
        //Ext.getCmp('authorizes-pagingtoolbar').moveFirst();

        //store.clear();
        //store.load();
        /*
        var prefix = 'ColorForm-';
        var quickStore = Ext.getStore(prefix + 'gridStore');
        quickStore.proxy.url = url;
        quickStore.getProxy().extraParams.Name = name;    
        var pagingToolbar = Ext.getCmp(prefix + 'PagingToolbar');
        pagingToolbar.moveFirst();

        */
    },

    onButtonAddClick: function (button, e, eOpts) {
        var rowEditing = this.getView().getComponent('grid').getPlugin('rowediting');
        rowEditing.cancelEdit();

        var record = Ext.create('TabUserInformation.model.Authorize'),
            store = this.getView().getComponent('grid').getStore();

        store.add({});
    },

    onButtonSaveClick: function (button, e, eOpts) {
        var store = this.getView().getComponent('grid').getStore(),
            arr = [];

        Ext.Array.each(store.getModifiedRecords(), function (record, index) {
            arr[index] = record.getData();
        });

        store.save();

        //        Ext.Ajax.request({
        //            method: 'post',
        //            cache: false,
        //            url: 'api/user/dopost',
        //            //params: { data: [] },
        //            jsonData: arr,
        //            contentType: "application/json; charset=utf-8",
        //            dataType: 'json',
        //            success: function (form, action) {
        //                Ext.Msg.alert('Success', "บันทึกข้อมูลเรียบร้อย");
        //                //                Ext.getCmp('pagingtoolbar-custinfo').moveFirst();
        //                //                button.up('window').close();
        //                //                console.log(form);
        //            },
        //            failure: function (form, action) {
        //                Ext.Msg.alert('Failed', 'กรุณาตรวจสอบว่า ชื่อผู้ใช้มีอยู่ในระบบ?');
        //            }
        //        });

        this.getView().getComponent('grid').view.refresh();
    },

    onButtonDeleteClick: function (button, e, eOpts) {
        var store = this.getView().down('grid').getStore(),
            record = this.getView().down('grid').getSelection()[0];

        if (record) {
            if (record.get('Id') != '0') {
                Ext.MessageBox.confirm('Confirm', 'Confirm Delete?',
                function (msg) {
                    if (msg == 'yes') {
                        store.remove(record);
                    }
                }, this);
            } else {
                store.remove(record);
            }
        }
    },

    onEditGrid: function (button, e, eOpts) {

        var store = this.getView().getComponent('grid').getStore(),
            record = this.getView().down('grid').getSelection()[0];
        Ext.MessageBox.confirm('Confirm', 'Confirm Insert or Update?', this.showResult, this); //, this.onDeleteClick(button, e, eOpts));
        //store.save();
    },

    onCancelEdit: function () {
        //remove dummy
        var grid = this.getView().getComponent('grid');
        if (this.checkInsertRecord(this.rec, grid.store.data.items[0].data)) {
            grid.store.removeAt(0, 1);
            grid.view.refresh();
        }
    },

    onDeleteClick: function (button, e, eOpts) {
        console.log('onDeleteClick');
        var records = this.getView().getComponent('grid').getSelectionModel().getSelection();
        var sotre = this.getView().getComponent('grid').getStore();
        sotre.remove(records);
        console.log(records);

    },

    //Check insert dummy
    checkInsertRecord: function (rec, record) {

        return ((rec.UserId === record.UserId) && (rec.Active === record.Active) && (rec.DepCode === record.DepCode));

    },

    getGridStore: function () {

        return this.getView().getComponent('grid').getStore();
    }

});
