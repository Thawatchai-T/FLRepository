    /*
 * File: app/view/Job/Indication/IndicationDetailViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.view.Job.Indication.IndicationDetailViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.jobindicationindicationdetail',

    fnSave: function () {
        var form = this.getView().down('form').getForm(),
        //panel = Ext.getCmp('jobjobwindow'),
            grid = Ext.getCmp('jobindicationindicationforequipmentwindow').down('grid'),
            store = grid.getStore(),
            record = grid.getSelection()[0];

        form.updateRecord(record);

        if (form.isValid()) {
            if (store.getModifiedRecords().length > 0) {
                store.sync({
                    success: function (batch, action) {
                        form.findField('save').setValue('Y');
                        Ext.Msg.alert('Success', 'สำเร็จแล้ว');
                    },
                    failure: function (batch, action) {
                        Ext.Msg.alert('Failure', 'ไม่สำเร็จ');
                    }
                });
            }
        } else {
            Ext.Msg.alert('Failure', 'ข้อมูลไม่ถูกต้อง');
        }
    },

    fnNewApplication: function (formName, modelName, storeName) {
        var me = this,
            form = Ext.getCmp(formName).getForm(),
            store = Ext.getStore(storeName),
            record = Ext.create('TabUserInformation.model.' + modelName);

        if (modelName === 'ApplicationDetail') {
            record.set('IndicationId', this.getView().down('form').getForm().findField('IndicationId').getValue());
        }
        else {
            store.removeAll();
            store.commitChanges();
        }

        store.add(record);
        form.loadRecord(record);
    },

    fnNewStore: function (storeName, modelName) {
        var store = Ext.getStore(storeName);

        store.load({
            params: {
                name: modelName
            }
        });
    },

    onButtonSaveClick: function (button, e, eOpts) {
        var me = this;

        Ext.MessageBox.confirm('Confirm', 'Confirm Save?', function (msg) {
            if (msg === 'yes') {
                me.fnSave();
            }
        });
    },

    onButtonNewClick: function (button, e, eOpts) {
        var me = this,
            form = this.getView().down('form').getForm();

        var popup = Ext.create('widget.jobapplicationapplicationdetail', {
            listeners: {
                beforerender: function (panel, eOpts) {
                    me.fnNewApplication('jobappapplication', 'ApplicationDetail', 'applicationDetails');
                    //me.fnNewApplication('jobappseller', 'seller');
                    me.fnNewApplication('jobapptermcondition', 'TermCondition', 'termConditions');
                    me.fnNewApplication('jobappoptionatend', 'OptionEndLeaseTerm', 'optionEndLeaseTerms');
                    me.fnNewApplication('jobappinsurance', 'Insurance', 'insurances');
                    me.fnNewApplication('jobappcommission', 'Commission', 'commissions');
                    me.fnNewApplication('jobappmaintenance', 'Maintenance', 'maintenances');
                    me.fnNewApplication('jobappmethodpayment', 'MethodPayment', 'methodPayments');
                    me.fnNewApplication('jobappstampduty', 'StampDuty', 'stampDuties');
                    me.fnNewApplication('jobappwaivedocument', 'WaiveDocument', 'waiveDocuments');
                    me.fnNewApplication('jobappguarantor', 'Guarantor', 'guarantors');
                    me.fnNewApplication('jobappstipulateloss', 'StipulateLoss', 'stipulateLosses');
                    me.fnNewApplication('jobappfunding', 'Funding', 'fundings');

                    me.fnNewStore('equipmentLists', 'EquipmentList');
                    me.fnNewStore('sellers', 'Seller');
                    me.fnNewStore('annualTaxes', 'AnnualTax');
                    me.fnNewStore('insuranceEquipments', 'InsuranceEquipment');
                    me.fnNewStore('insuranceEquipments2', 'InsuranceEquipment');
                    me.fnNewStore('insuranceEquipments3', 'InsuranceEquipment');
                    me.fnNewStore('guarantorLists', 'GuarantorList');
                    me.fnNewStore('collectionSchedules', 'CollectionSchedule');
                    me.fnNewStore('maintenanceLists', 'MaintenanceList');
                    me.fnNewStore('equipmentDetails', 'EquipmentDetail');
                    me.fnNewStore('purchaseOrders', 'PurchaseOrder');
                    //me.fnNewStore('approvals', 'Approval');

                    //--close page--//
                    form.findField('save').setValue('Y');
                    Ext.getCmp('jobjobwindow').down('tabpanel').setActiveTab(3);
                    me.getView().close();
                    Ext.getCmp('jobindicationindicationforequipmentwindow').down('form').getForm().findField('save').setValue('Y');
                    Ext.getCmp('jobindicationindicationforequipmentwindow').close();
                },
                afterrender: function (panel, eOpts) {
                    
                }
            }
        });
        popup.show();
    },

    onBeforeClose: function (panel, eOpts) {
        var me = this,
            form = panel.down('form').getForm();

        if (panel.closeMe) {
            panel.closeMe = false;
            return true;
        }

        if (form.findField('save').getValue() === 'N') {
            Ext.Msg.show({
                title: 'Save',
                message: 'Save Changes?',
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                width: 300,
                fn: function (btn) {
                    if (btn === 'yes') {
                        Ext.MessageBox.show({
                            title: 'Please wait',
                            msg: 'Saving items...',
                            progressText: 'Saving...',
                            width: 300,
                            progress: true,
                            closable: false,
                        });

                        me.fnSave();

                    } else if (btn === 'no') {
                        panel.closeMe = true;
                        panel.close();
                    }
                }
            });
        }else {
            panel.closeMe = true;
            panel.close();
        }

        return false;
    },

    onClose: function (panel, eOpts) {
        
    }
});
