/*
* File: app/view/Job/Information/InformationForIndicationWindowViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Job.Information.InformationForIndicationWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.jobinformationinformationforindicationwindow',

    onButtonLeadClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm();

        var popup = Ext.createByAlias('widget.visitcallingvisitcallingpopup', {
            listeners: {
                close: function (panel, eOpts) {
                    var record = panel.down('gridpanel').getSelection()[0];
                    if (record) {
                        form.loadRecord(record);
                    }
                }
            }
        });

        popup.show();
    },

    onButtonCusInfClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm();

        var popup = Ext.createByAlias('widget.customercusinfpopup', {
            listeners: {
                close: function (panel, eOpts) {
                    var record = panel.down('gridpanel').getSelection()[0];
                    if (record) {
                        form.loadRecord(record);
                    }
                }
            }
        });
        popup.show();
    },

    onButtonAddressClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm();

        var popup = Ext.create('widget.commonaddresswindow', {
            listeners: {
                beforeshow: function (panel, eOpts) {
                    Ext.getCmp('addresstoolbar').hide();
                },
                close: function (panel, eOpts) {
                    var record = panel.down('gridpanel').getSelection()[0];

                    if (record) {
                        form.loadRecord(record);
                    }
                }
            }
        });
    },

    onButtonLeadRequestedTransactionsClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            me = this;

        var popup = Ext.create('widget.jobinformationdetailrequesttransaction', {
            listeners: {
                beforerender: function (panel, eOpts) {
                },
                close: function (panel, eOpts) {
                    me.getView().close();
                }
            }
        }).show();
    },

    onShareholderClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            me = this;

        var popup = Ext.create('widget.customershareholders', {
            listeners: {
                beforerender: function (panel, eOpts) {
                },
                close: function (panel, eOpts) {
                }
            }
        }).show();
    },

    onButtonSaveClick: function (button, e, eOpts) {
        var view = this.getView(),
            form = view.down('form').getForm(),
            formHeader = view.lookupReference('form-header').getForm(),
            formBackground = view.lookupReference('form-background').getForm(),
            formFooter = view.lookupReference('form-footer').getForm(),
        //            store = Ext.create('store.informationForIndications'),
            panel = Ext.getCmp('jobjobwindow'),
            grid = panel.down('jobinformationinformationforindicationtab').down('grid'),
            store = grid.getStore(),
            storeBackground = this.getViewModel().data.backgrounds,
        //            record = Ext.create('model.informationforindication'),
        //            recordBackground = Ext.create('model.background');
        record = grid.getSelection()[0],
        recordBackground = storeBackground.findRecord('InformationId', record.get('Id'));

        formHeader.updateRecord(record);
        formFooter.updateRecord(record);
        view.lookupReference('form-background').getForm().updateRecord(recordBackground);

        if (formHeader.isValid() && formBackground.isValid() && formFooter.isValid()) {
            if (store.getModifiedRecords().length > 0) {
                store.sync({
                    success: function (batch, action) {
                        Ext.Msg.alert('Success', 'สำเร็จแล้ว');
                    },
                    failure: function (batch, action) {
                        Ext.Msg.alert('Failure', 'ไม่สำเร็จ');
                    }
                });
            }
            if (storeBackground.getModifiedRecords().length > 0) {
                storeBackground.sync({
                    success: function (batch, action) {
                        Ext.Msg.alert('Success', 'สำเร็จแล้ว');
                    },
                    failure: function (batch, action) {
                        Ext.Msg.alert('Failure', 'ไม่สำเร็จ');
                    }
                });
            }
        } else {
            Ext.Msg.alert('Failure', 'ข้อมูลไม่ถูกต้อง');
        }
    },

    onFieldsetBeforeRender: function (component, eOpts) {
        // component.down('#Business').setValue(0);
    },

    onCheckboxfieldChange: function (field, newValue, oldValue, eOpts) {
        var textfield = this.getView().lookupReference('eqpyear');
        if (newValue) {
            textfield.enable();
        } else {
            textfield.disable();
        }
    },

    onCheckboxfieldChange1: function (field, newValue, oldValue, eOpts) {
        var textfield = this.getView().lookupReference('programname');
        if (newValue) {
            textfield.enable();
        } else {
            textfield.disable();
        }
    }

});
