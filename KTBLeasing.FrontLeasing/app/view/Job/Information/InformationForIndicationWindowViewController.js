 /*
* File: app/view/Job/Information/InformationForIndicationWindowViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Job.Information.InformationForIndicationWindowViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.jobinformationinformationforindicationwindow',

    fnSave: function () {
        var view = this.getView(),
            form = view.down('form').getForm(),
            formHeader = view.lookupReference('form-header').getForm(),
            formBackground = view.lookupReference('form-background').getForm(),
            formFooter = view.lookupReference('form-footer').getForm(),
            panel = Ext.getCmp('jobjobwindow'),
            grid = panel.down('jobinformationinformationforindicationtab').down('grid'),
            store = grid.getStore(),
            storeBackground = Ext.getStore('backgrounds'),
            record = grid.getSelection()[0],
            recordBackground = formBackground.getRecord();

        formHeader.updateRecord(record);
        formFooter.updateRecord(record);
        formBackground.updateRecord(recordBackground);

        if (formHeader.isValid() && formBackground.isValid() && formFooter.isValid()) {
            if (store.getModifiedRecords().length > 0) {
                store.sync({
                    success: function (batch, action) {
                        if (storeBackground.getModifiedRecords().length > 0) {
                            storeBackground.sync({
                                success: function (batch, action) {
                                    Ext.Msg.alert('Success', 'สำเร็จแล้ว');
                                },
                                failure: function (batch, action) {
                                    Ext.Msg.alert('Failure', 'ไม่สำเร็จ');
                                }
                            });
                        }
                    },
                    failure: function (batch, action) {
                        Ext.Msg.alert('Failure', 'ไม่สำเร็จ');
                    }
                });
            }
            
        } else {
            Ext.Msg.alert('Failure', 'ข้อมูลไม่ถูกต้อง');
        }
    },

    onButtonLeadClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm();

        var popup = Ext.createByAlias('widget.visitcallingvisitcallingpopup', {
            listeners: {
                close: function (panel, eOpts) {
                    var record = panel.down('gridpanel').getSelection()[0];
                    if (record) {
                        form.loadRecord(record);
                    }
                }
            }
        });

        popup.show();
    },

    onButtonCusInfClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm();

        var popup = Ext.createByAlias('widget.customercusinfpopup', {
            listeners: {
                close: function (panel, eOpts) {
                    var record = panel.down('gridpanel').getSelection()[0];
                    if (record) {
                        form.loadRecord(record);
                    }
                }
            }
        });
        popup.show();
    },

    onButtonAddressClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            custid = form.findField('CustomerId').getValue(),

        popup = Ext.create('widget.windowaddressviews', {
            listeners: {
                beforeshow: function (panel, eOpts) {
                    var store = panel.lookupReference('addressgrid').getStore();

                    Ext.getCmp('addresstoolbar').hide();

                    store.getProxy().extraParams.text = custid;
                    store.load(function(records, operation, success) {
                        panel.down('form').getForm().findField('CustomerId').setValue('<b style="color:green;">' + custid + '</b>');
                        if(records.length > 0) {
                            panel.down('form').getForm().findField('CustomerThaiName').setValue('<b style="color:green;">' + records[0].data.Customer.NameTh + '</b>');
                        }
                    });
                },
                close: function (panel, eOpts) {
                    var record = panel.down('gridpanel').getSelection()[0];
                    if (record) {
                        form.findField('AddressTh').setValue(record.get('AddressTh'));
                        form.findField('SubdistrictId').setValue(record.get('SubdistrictId'));
                    }
                }
            }
        }).show();
    },

    onButtonLeadRequestedTransactionsClick: function (button, e, eOpts) {
        var me = this;

        var popup = Ext.create('widget.jobinformationdetailrequesttransaction', {
            listeners: {
                beforerender: function (panel, eOpts) {
                    var form = panel.down('form').getForm(),
                        store = Ext.getStore('requestTransactions');

                    store.getProxy().extraParams.infoId = me.getView().down('form').getForm().findField('Id').getValue();
                    store.load(function (records, operation, success) {
                        if (records.length > 0) {
                            form.loadRecord(records[0]);
                            form.findField('InformationId').setValue(me.getView().down('form').getForm().findField('Id').getValue());
                            form.findField('Delivery').setValue(Ext.Date.format(records[0].get('Delivery'), 'Y-m'));
                        } else {
                            var record = Ext.create('model.requesttransaction');
                            store.add(record);
                            form.loadRecord(record);
                        }
                    });
                }
            }
        }).show();
    },

    onButtonForManagementClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            me = this,
            record = form.getRecord();

        var popup = Ext.create('widget.approveapprovalwindow', {
            listeners: {
                beforerender: function (panel, eOpts) {
                    var form = panel.down('form').getForm(),
                        grid = panel.down('grid'),
                        store = grid.getStore();

                    store.getProxy().extraParams.infoId = record.get('Id');
                    store.load(function (records, operation, success) {
                        form.loadRecord(records[store.getCount() - 1]);
                        panel.down('#InformationId').setValue(record.get('Id'));
                    });
                },
                close: function (panel, eOpts) {
                }
            }
        }).show();
    },
    
    onButtonRequestApproveClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            record = form.getRecord(),
            me = this;

        Ext.MessageBox.confirm('Confirm', 'Confirm Save?', function (msg) {
            if (msg === 'yes') {
                record.set('Approve', true);
                me.fnSave();
            }
        });
    },

    onShareholderClick: function (button, e, eOpts) {
        var form = this.getView().down('form').getForm(),
            me = this;

        var popup = Ext.create('widget.customershareholders', {
            listeners: {
                beforerender: function (panel, eOpts) {
                },
                close: function (panel, eOpts) {
                }
            }
        }).show();
    },

    onButtonSaveClick: function (button, e, eOpts) {
        var me = this;

        Ext.MessageBox.confirm('Confirm', 'Confirm Save?', function (msg) {
            if (msg === 'yes') {
                me.fnSave();
            }
        });
    },

    onFieldsetBeforeRender: function (component, eOpts) {
        // component.down('#Business').setValue(0);
    },

    onCheckboxfieldChange: function (field, newValue, oldValue, eOpts) {
        var textfield = this.getView().lookupReference('eqpyear');
        if (newValue) {
            textfield.enable();
        } else {
            textfield.disable();
        }
    },

    onCheckboxfieldChange1: function (field, newValue, oldValue, eOpts) {
        var textfield = this.getView().lookupReference('programname');
        if (newValue) {
            textfield.enable();
        } else {
            textfield.disable();
        }
    },

    onBeforeClose: function (panel, eOpts) {
        var me = this,
            form = panel.down('form').getForm();

        if (panel.closeMe) {
            panel.closeMe = false;
            return true;
        }

        if (form.findField('save').getValue() === 'N') {
            Ext.Msg.show({
                title: 'Save',
                message: 'Save Changes?',
                buttons: Ext.Msg.YESNOCANCEL,
                icon: Ext.Msg.QUESTION,
                width: 300,
                fn: function (btn) {
                    if (btn === 'yes') {
                        Ext.MessageBox.show({
                            title: 'Please wait',
                            msg: 'Saving items...',
                            progressText: 'Saving...',
                            width: 300,
                            progress: true,
                            closable: false,
                        });

                        me.fnSave();

                    } else if (btn === 'no') {
                        panel.closeMe = true;
                        panel.close();
                    }
                }
            });
        }else {
            panel.closeMe = true;
            panel.close();
        }

        return false;
    },

    onClose: function (panel, eOpts) {

    }

});
