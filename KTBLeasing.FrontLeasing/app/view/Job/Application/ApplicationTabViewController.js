/*
* File: app/view/Job/Application/ApplicationTabViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Job.Application.ApplicationTabViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.jobapplicationapplicationtab',

    onGridpanelItemDblClick: function (dataview, record, item, index, e, eOpts) {
        var store = dataview.getStore(),
            Id = record.get('Id'),
            me = this;

        sessionStorage.setItem('AppDetail', Ext.encode(record.data));

        var popup = Ext.create('widget.jobapplicationapplicationdetail', {
            listeners: {
                beforerender: function (panel, eOpts) {
                    var recordJob = Ext.getCmp('jobjobwindow').down('form').getForm().getRecord();

                    //-- Load Form Parent --//
                    var storeBackground = Ext.getStore('backgrounds');
                    storeBackground.getProxy().extraParams.custId = recordJob.get('CustId');
                    storeBackground.load(function (records, operation, success) {
                        Ext.getCmp('jobappapplication').getForm().loadRecord(records[0]);
                        Ext.getCmp('jobappapplication').getForm().loadRecord(record);
                    });


                    //-- Load Form Child --//
                    me.onLoadForm(Ext.getCmp('jobappcommission'), 'commissions', 'Commission', Id);
                    me.onLoadForm(Ext.getCmp('jobappguarantor'), 'guarantors', 'Guarantor', Id);
                    me.onLoadForm(Ext.getCmp('jobappfunding'), 'fundings', 'Funding', Id);
                    me.onLoadForm(Ext.getCmp('jobappstipulateloss'), 'stipulateLosses', 'StipulateLoss', Id);
                    me.onLoadForm(Ext.getCmp('jobappoptionatend'), 'optionEndLeaseTerms', 'OptionEndLeaseTerm', Id);
                    me.onLoadForm(Ext.getCmp('jobappmaintenance'), 'maintenances', 'Maintenance', Id);
                    me.onLoadForm(Ext.getCmp('jobappinsurance'), 'insurances', 'Insurance', Id);
                    me.onLoadForm(Ext.getCmp('jobappwaivedocument'), 'waiveDocuments', 'WaiveDocument', Id);
                    me.onLoadForm(Ext.getCmp('jobappstampduty'), 'stampDuties', 'StampDuty', Id);
                    me.onLoadForm(Ext.getCmp('jobappmethodpayment'), 'methodPayments', 'MethodPayment', Id);
                    me.onLoadForm(Ext.getCmp('jobapptermcondition'), 'termConditions', 'TermCondition', Id);
                    //me.onLoadForm(Ext.getCmp('jobappregistrationform'), 'registrationForms', 'RegistrationForm', Id);
                    //me.onLoadForm(Ext.getCmp('jobappcollectionschedule'), 'CollectionSchedule', Id);

                    var equipmentLists = Ext.getStore('equipmentLists');
                    equipmentLists.getProxy().extraParams.app_id = Id;
                    equipmentLists.load();

                    me.onLoadStore(Ext.getStore('sellers'), 'Seller', Id);
                    me.onLoadStore(Ext.getStore('annualTaxes'), 'AnnualTax', Id);
                    me.onLoadStore(Ext.getStore('insuranceEquipments'), 'InsuranceEquipment', Id);
                    me.onLoadStore(Ext.getStore('insuranceEquipments2'), 'InsuranceEquipment', Id);
                    me.onLoadStore(Ext.getStore('insuranceEquipments3'), 'InsuranceEquipment', Id);
                    me.onLoadStore(Ext.getStore('guarantorLists'), 'GuarantorList', Id);
                    me.onLoadStore(Ext.getStore('collectionSchedules'), 'CollectionSchedule', Id);
                    me.onLoadStore(Ext.getStore('maintenanceLists'), 'MaintenanceList', Id);
                    //me.onLoadStore(Ext.getStore(''), 'EquipmentDetail', Id);
                    me.onLoadStore(Ext.getStore('purchaseOrders'), 'PurchaseOrder', Id);
                    //me.onLoadStore(Ext.getStore(''), 'Approval', Id);
                },
                close: function (panel, eOpts) {
                    store.reload();
                }
            }
        });

        popup.show();
    },

    onButtonNewClick: function (button, e, eOpts) {
        var popup = Ext.create('widget.jobapplicationapplicationwindow');
        popup.show();
    },

    onLoadForm: function (form, storeName, name, id) {
        var store = Ext.getStore(storeName);
        store.load({
            params: {
                name: name,
                Id: id
            },
            callback: function (records, operation, success) {
                if (records.length > 0) {
                    form.getForm().loadRecord(records[0]);
                } else {
                    var record = Ext.create('TabUserInformation.model.' + name);

                    store.add(record);
                    form.getForm().loadRecord(record);
                }
            }
        });
    },

    onLoadStore: function (store, name, id) {
        store.getProxy().extraParams.id = id;
        store.getProxy().extraParams.name = name;
        store.load();
    }
});
