/*
* File: app/view/Job/Application/Window/EquipmentDetailViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Job.Application.Window.EquipmentDetailViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.jobapplicationwindowequipmentdetail',

    HideAndShow: function (value) {
        var field = [],
            form = this.getView().down('form').getForm();

        switch (value) {
            case 'Machine':
                this.getView().lookupReference('eqpdetail').setTitle('Machine');
                field = ["RowNumber", "SubType", "Brand", "Model", "FrameChassisSerialNo", "FLNo", "EngineNo", "Remark", 'detail2'];
                this.getView().down('#FrameNo').show();
                form.findField('SubType').setStore(Ext.create('TabUserInformation.store.CommonData.subTypesMachine'));
                form.findField('Brand').setStore(Ext.create('TabUserInformation.store.CommonData.brandsMachine'));
                break;
            case 'Passenger Car':
                this.getView().lookupReference('eqpdetail').setTitle('Passenger Car');
                field = ["RowNumber", "SubType", "Brand", "Model", "CC", "FrameChassisSerialNo", "FLNo", "EngineNo", "Book", "BookBy",
                        "BookReceivedDate", "PowNo", "BookReturnDate", "SpareKey", "SpareBy", "SpareReceivedDate", "SpareReturnDate",
                        "Remark", 'detail2', 'detail3'];
                this.getView().down('#ChassisNo').show();
                form.findField('SubType').setStore(Ext.create('TabUserInformation.store.CommonData.subTypesPassengerCar'));
                form.findField('Brand').setStore(Ext.create('TabUserInformation.store.CommonData.brandsPassengerCar'));
                break;
            case 'Commercial Car':
                this.getView().lookupReference('eqpdetail').setTitle('Commercial Car');
                field = ["RowNumber", "SubType", "Brand", "Model", "CC", "FrameChassisSerialNo", "FLNo", "EngineNo", "Book", "BookBy",
                        "BookReceivedDate", "PowNo", "BookReturnDate", "SpareKey", "SpareBy", "SpareReceivedDate", "SpareReturnDate",
                        "Remark", 'detail2', 'detail3'];
                this.getView().down('#ChassisNo').show();
                form.findField('SubType').setStore(Ext.create('TabUserInformation.store.CommonData.subTypesCommercialCar'));
                form.findField('Brand').setStore(Ext.create('TabUserInformation.store.CommonData.brandsCommercialCar'));
                break;
            case 'Factoring':
                this.getView().lookupReference('eqpdetail').setTitle('Factoring');
                field = ["RowNumber", "SubType", "Brand", "DateInvoice", "DueDate", "Remark"];
                this.getView().down('#FrameNo').show();
                form.findField('SubType').setStore(Ext.create('TabUserInformation.store.CommonData.subTypesFactoring'));
                form.findField('Brand').setStore(Ext.create('TabUserInformation.store.CommonData.brandsFactoring'));
                break;
            case 'Office Automation':
                this.getView().lookupReference('eqpdetail').setTitle('Office Automation');
                field = ["RowNumber", "SubType", "Brand", "Model", "SerialNo", "Remark"];
                this.getView().down('#SerialNo').show();
                form.findField('SubType').setStore(Ext.create('TabUserInformation.store.CommonData.subTypesOfficeAutomation'));
                form.findField('Brand').setStore(Ext.create('TabUserInformation.store.CommonData.brandsOfficeAutomation'));
                break;
        }

        var object = this.getView().lookupReference('eqpdetail').getForm().getValues();

        for (var a in object) {
            this.getView().lookupReference('eqpdetail').getForm().findField(a).hide();
        }
        this.getView().down('#detail2').hide();
        this.getView().down('#detail3').hide();

        for (var b in field) {
            if (field[b] == 'detail2') {
                this.getView().down('#detail2').show();
            }
            else if (field[b] == 'detail3') {
                this.getView().down('#detail3').show();
            }
            else {
                this.getView().lookupReference('eqpdetail').getForm().findField(field[b]).show();
            }
        }
    },

    onGridpanelSelectionChange: function (model, selected, eOpts) {
        var view = this.getView(),
            form = view.down('form').getForm(),
            store = view.down('grid').getStore();

        if (selected[0]) {
            form.reset();
            form.loadRecord(selected[0]);
            form.findField('RowNumber').setValue(store.indexOf(selected[0]) + 1);
            form.findField('Book').setValue(selected[0].get('Book'));
            form.findField('SpareKey').setValue(selected[0].get('SpareKey'));
        }
    },

    onGridpanelDeselect: function (model, record, index, eOpts) {
        var form = this.getView().down('form').getForm();

        form.updateRecord(record);
    },

    onButtonAddClick: function (button, e, eOpts) {
        var grid = this.getView().down('gridpanel'),
            Id = this.getView().down('form').getForm().findField('Id').getValue(),
        //FrameChassisSerialNo = store;
        store = grid.getStore(),
            record = Ext.create('model.equipmentdetail', {
                EquipmentList: {
                    Id: Id
                }
            });

            console.log(store.getAt(store.totalCount - 1));

            record.data.Id = 0;
            //var FrameNo = store.getAt(store.totalCount - 1).FrameChassisSerialNo + 1
        //record.data.FrameChassisSerialNo = store.getAt(store.totalCount - 1).FrameChassisSerialNo + 1;
        store.add(record);
    },

    onButtonDeleteClick: function (button, e, eOpts) {
        var store = this.getView().down('gridpanel').getStore(),
            record = this.getView().down('gridpanel').getSelection()[0];

        store.remove(record);
    },

    onStoreBeforeLoad: function (store, operation, eOpts) {
        var Id = this.getView().down('form').getForm().getValues().Id;

        store.getProxy().extraParams.id = Id;
        store.getProxy().extraParams.name = 'EquipmentDetail';
    }

});
