/*
 * File: app/view/Job/Application/Tab/InsuranceViewController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.view.Job.Application.Tab.InsuranceViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.jobapplicationtabinsurance',

    onButtonAddClick: function(button, e, eOpts) {
        var grid = this.getView().lookupReference('grid1'),
            store = grid.getStore(),
            record = Ext.create('model.insuranceequipment');

        store.add(record);
        grid.view.refresh();
    },

    onButtonInsertClick: function(button, e, eOpts) {

    },

    onButtonDeleteClick: function(button, e, eOpts) {
        var grid = this.getView().lookupReference('grid1'),
            store = grid.getStore(),
            record = grid.getSelection()[0];

        if(record){
            if(record.get('Id') != '0'){
                Ext.MessageBox.confirm('Confirm','Confirm Delete?',
                function(msg){
                    if(msg == 'yes'){
                        store.remove(record);
                    }
                },this);
            }else{
                store.remove(record);
            }
        }

    },

    onRowEditingEdit: function(editor, context, eOpts) {
        var value,
            name,
            storeCombo;

        for(var nameField in context.record.modified){
            switch(nameField){
                case "Chassis":
                value = context.newValues.Chassis;
                name = nameField;
                storeCombo = Ext.create('store.commondatachassis');
                break;
                case "Territory":
                value = context.newValues.Territory;
                name = nameField;
                storeCombo = Ext.create('store.commondataterritory');
                break;
            }

            var display = storeCombo.findRecord('Id', value);

            if(display){
                context.record.set(name,display.get('Name'));
            }
        }

        editor.view.refresh();
    },

    onButtonAddClick1: function(button, e, eOpts) {
        var grid = this.getView().lookupReference('grid2'),
            store = grid.getStore(),
            record = Ext.create('model.insuranceequipment');

        store.add(record);
        grid.view.refresh();
    },

    onButtonInsertClick1: function(button, e, eOpts) {

    },

    onButtonDeleteClick1: function(button, e, eOpts) {
        var grid = this.getView().lookupReference('grid2'),
            store = grid.getStore(),
            record = grid.getSelection()[0];

        if(record){
            if(record.get('Id') != '0'){
                Ext.MessageBox.confirm('Confirm','Confirm Delete?',
                function(msg){
                    if(msg == 'yes'){
                        store.remove(record);
                    }
                },this);
            }else{
                store.remove(record);
            }
        }

    },

    onRowEditingEdit3: function(editor, context, eOpts) {
        var value,
            name,
            storeCombo;

        for(var nameField in context.record.modified){
            switch(nameField){
                case "Chassis":
                value = context.newValues.Chassis;
                name = nameField;
                storeCombo = Ext.create('store.commondatachassis');
                break;
                case "Territory":
                value = context.newValues.Territory;
                name = nameField;
                storeCombo = Ext.create('store.commondataterritory');
                break;
            }

            var display = storeCombo.findRecord('Id', value);

            if(display){
                context.record.set(name,display.get('Name'));
            }
        }

        editor.view.refresh();
    },

    onButtonAddClick11: function(button, e, eOpts) {
        var grid = this.getView().lookupReference('grid3'),
            store = grid.getStore(),
            record = Ext.create('model.insuranceequipment');

        store.add(record);
        grid.view.refresh();
    },

    onButtonInsertClick11: function(button, e, eOpts) {

    },

    onButtonDeleteClick11: function(button, e, eOpts) {
        var grid = this.getView().lookupReference('grid3'),
            store = grid.getStore(),
            record = grid.getSelection()[0];

        if(record){
            if(record.get('Id') != '0'){
                Ext.MessageBox.confirm('Confirm','Confirm Delete?',
                function(msg){
                    if(msg == 'yes'){
                        store.remove(record);
                    }
                },this);
            }else{
                store.remove(record);
            }
        }

    },

    onRowEditingEdit31: function(editor, context, eOpts) {
        var value,
            name,
            storeCombo;

        for(var nameField in context.record.modified){
            switch(nameField){
                case "Chassis":
                value = context.newValues.Chassis;
                name = nameField;
                storeCombo = Ext.create('store.commondatachassis');
                break;
                case "Territory":
                value = context.newValues.Territory;
                name = nameField;
                storeCombo = Ext.create('store.commondataterritory');
                break;
            }

            var display = storeCombo.findRecord('Id', value);

            if(display){
                context.record.set(name,display.get('Name'));
            }
        }

        editor.view.refresh();
    }

});
