/*
* File: app/view/Job/Application/ApplicationDetailViewController.js
*
* This file was generated by Sencha Architect version 3.1.0.
* http://www.sencha.com/products/architect/
*
* This file requires use of the Ext JS 5.0.x library, under independent license.
* License of Sencha Architect does not include license for Ext JS 5.0.x. For more
* details see http://www.sencha.com/license or contact license@sencha.com.
*
* This file will be auto-generated each and everytime you save your project.
*
* Do NOT hand edit this file.
*/

Ext.define('TabUserInformation.view.Job.Application.ApplicationDetailViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.jobapplicationapplicationdetail',

    fnSave: function () {
        var form = Ext.getCmp('jobappapplication').getForm(),
            record = form.getRecord(),
            store = record.store,
            me = this;

        form.updateRecord(record);

        Ext.Ajax.request({
            method: 'post',
            url: 'api/ApplicationDetail/Post',
            params: {
                jobId: Ext.getCmp('jobjobwindow').down('form').getForm().findField('Id').getValue(),
                indicationId: form.findField('IndicationId').getValue()
            },
            jsonData: record.data,
            success: function (response) {
                var Id = response.responseText;
                me.getView().down('form').getForm().findField('Id').setValue(Id);

                me.saveStore('jobapplicationtabapplication', 'EquipmentList');
                me.saveStore('jobapplicationtabseller', 'Seller');
                me.saveStore('jobapplicationtabguarantor', 'GuarantorList');
                me.saveStore('jobapplicationtabinsurance', 'InsuranceEquipment');
                me.saveStore('jobapplicationtabannualtax', 'AnnualTax');
                me.saveStore('jobapplicationtabmaintenances', 'MaintenanceList');
                me.saveStore('jobapplicationtabcollectionschedule', 'CollectionSchedule');
                me.saveStore('jobapplicationtabpurchaseorder', 'PurchaseOrder');

                me.saveForm('jobappwaivedocument', 'WaiveDocument', Id);
                me.saveForm('jobappguarantor', 'Guarantor', Id);
                me.saveForm('jobappfunding', 'Funding', Id);
                me.saveForm('jobappstipulateloss', 'StipulateLoss', Id);
                me.saveForm('jobappoptionatend', 'OptionEndLeaseTerm', Id);
                me.saveForm('jobappcommission', 'Commission', Id);
                me.saveForm('jobappmaintenance', 'Maintenance', Id);
                me.saveForm('jobappinsurance', 'Insurance', Id);
                me.saveForm('jobappstampduty', 'StampDuty', Id);
                me.saveForm('jobappmethodpayment', 'MethodPayment', Id);
                me.saveForm('jobapptermcondition', 'TermCondition', Id);
            },
            failure: function (response) {
                Ext.MessageBox.alert("Error", response.responseText);
            }
        });
    },

    onTabpanelBeforeRender: function (component, eOpts) {
        component.setHeight(Ext.getBody().getViewSize().height * 0.92);
    },

    onButtonSaveClick: function (button, e, eOpts) {
        var me = this;

        Ext.MessageBox.confirm('Confirm', 'Confirm Save?', function (msg) {
            if (msg === 'yes') {
                me.fnSave();
            }
        });
    },

    saveStore: function (panel, name) {
        var grid = this.getView().down(panel).down('grid'),
            store = grid.getStore();

        if (store.getModifiedRecords().length > 0) {
            store.getProxy().extraParams.name = name;
            store.sync({
                success: function (batch) {
                    store.load();
                },
                failure: function (batch) {
                    Ext.Msg.alert('Failed', 'Form ' + name + ' Error');
                }
            });
        }
    },

    saveForm: function (panel, name, id) {
        var form = Ext.getCmp(panel).getForm(),
            record = form.getRecord(),
            store = record.store;
            
            record.set({
                ApplicationDetail: {
                    Id: id
                }
            });

            form.updateRecord(record);

        if (store.getModifiedRecords().length > 0) {
            store.getProxy().extraParams.name = name;
            store.sync({
                success: function (response) {
                    if(name === 'TermCondition'){
                        Ext.Msg.alert('Success', 'บันทึกข้อมูลเรียบร้อย');
                    }
                },
                failure: function (response) {
                    Ext.Msg.alert('Failed', 'Form ' + name + ' Error');
                }
            });
        }
    },

    onBeforeClose: function (panel, eOpts) {
        var me = this;

        if (panel.closeMe) {
            panel.closeMe = false;
            return true;
        }

        Ext.Msg.show({
            title: 'Save',
            message: 'Save Changes?',
            buttons: Ext.Msg.YESNOCANCEL,
            icon: Ext.Msg.QUESTION,
            width: 300,
            fn: function (btn) {
                if (btn === 'yes') {
                    Ext.MessageBox.show({
                        title: 'Please wait',
                        msg: 'Saving items...',
                        progressText: 'Saving...',
                        width: 300,
                        progress: true,
                        closable: false,
                    });

                    me.fnSave();

                } else if (btn === 'no') {
                    panel.closeMe = true;
                    panel.close();
                }
            }
        });

        return false;
    },

    onClose: function (panel, eOpts) {

    }
});

