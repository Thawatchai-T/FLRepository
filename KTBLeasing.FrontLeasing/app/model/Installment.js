/*
 * File: app/model/Installment.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.model.Installment', {
    extend: 'Ext.data.Model',
    alias: 'model.installment',

    requires: [
        'Ext.data.field.Integer',
        'Ext.data.field.Date',
        'Ext.data.field.Number',
        'TabUserInformation.model.RestructureList'
    ],

    idProperty: 'Id',

    fields: [
        {
            type: 'int',
            name: 'Id'
        },
        {
            type: 'int',
            name: 'Res_Id'
        },
        {
            name: 'Agreement'
        },
        {
            type: 'int',
            name: 'SEQ'
        },
        {
            type: 'int',
            name: 'InstallNo',
            unique: true
        },
        {
            type: 'date',
            name: 'InstallmentDate',
            dateWriteFormat: 'MS'
        },
        {
            type: 'float',
            name: 'InstallmentBeforeVAT'
        },
        {
            type: 'float',
            name: 'VAT',
            calculate: function (data) {
                if(data.Interest === 0.00){
                    return 0.00;  
                }else{
                    return data.InstallmentBeforeVAT * 0.07;
                }
            }
        },
        {
            type: 'float',
            name: 'Total',
            calculate: function (data) {
                return data.InstallmentBeforeVAT + data.VAT;
            }
        },
        {
            type: 'float',
            name: 'Principle',
            calculate: function (data) {
                return data.InstallmentBeforeVAT - data.Interest;
            }
        },
        {
            type: 'float',
            name: 'Interest'
        },
        {
            type: 'float',
            name: 'OS_PR'
        },
        {
            type: 'float',
            name: 'Penalty',
//            calculate: function (data) {
//                return Ext.decode(sessionStorage.getItem('dataRestructure')).Penalty / Ext.decode(sessionStorage.getItem('dataRestructure')).NewTerm;
//            }
        },
        {
            type: 'float',
            name: 'Installment_Total',
            calculate: function (data) {
                return data.InstallmentBeforeVAT + data.Penalty;
            }
        },
        {
            type: 'float',
            name: 'Waste_Value',
            calculate: function (data) {
                var result = 0.00;
                if (data.InstallNo > 0) {
                    result = (1 / Math.pow((1 + ((Ext.decode(sessionStorage.getItem('dataRestructure')).EffectiveRate / 100) / 12)), data.InstallNo));
                }
                return result;
            }
        },
        {
            type: 'float',
            name: 'PV',
            calculate: function (data) {
                return data.InstallmentBeforeVAT * data.Waste_Value;
            }
        }
    ]
});