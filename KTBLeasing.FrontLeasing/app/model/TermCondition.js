/*
 * File: app/model/TermCondition.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('TabUserInformation.model.TermCondition', {
    extend: 'Ext.data.Model',
    alias: 'model.termcondition',

    requires: [
        'Ext.data.field.Integer',
        'Ext.data.field.Boolean',
        'Ext.data.field.Number',
        'Ext.data.field.Date'
    ],

    idProperty: 'Id',

    fields: [
        {
            type: 'int',
            name: 'Id'
        },
        {
            type: 'int',
            name: 'AppId'
        },
        {
            type: 'int',
            name: 'LeaseTerm'
        },
        {
            type: 'int',
            name: 'PaymentId'
        },
        {
            type: 'int',
            name: 'TypeId'
        },
        {
            name: 'SyndicateSubLease'
        },
        {
            type: 'int',
            name: 'AdvanceArrearId'
        },
        {
            type: 'int',
            name: 'TypeFinanceId'
        },
        {
            type: 'int',
            name: 'RateTypeId'
        },
        {
            type: 'int',
            name: 'SubsequenceDueDay'
        },
        {
            type: 'boolean',
            name: 'Irregular'
        },
        {
            type: 'boolean',
            name: 'PerUnitEqual'
        },
        {
            type: 'boolean',
            name: 'AbnormalRental'
        },
        {
            name: 'ReceivedCompanyName'
        },
        {
            type: 'float',
            name: 'FinanceFeeAmount'
        },
        {
            type: 'float',
            name: 'PercentEquipmentCost'
        },
        {
            type: 'float',
            name: 'PercentEquipmentCostTypeId'
        },
        {
            type: 'int',
            name: 'PaymentConditionId'
        },
        {
            type: 'float',
            name: 'FirstDuePerUnit'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.FirstDuePerUnit;
            },
            name: 'FirstDueTotal'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.FirstDuePerUnit;
            },
            name: 'FirstDueEqualTo'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.FirstDuePerUnit * 7 / 100;
            },
            name: 'FirstDueVatAmount'
        },
        {
            type: 'float',
            name: 'SecondDuePerUnit'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.SecondDuePerUnit;
            },
            name: 'SecondDueTotal'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.SecondDuePerUnit;
            },
            name: 'SecondDueEqualTo'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.SecondDuePerUnit * 7 / 100;
            },
            name: 'SecondDueVatAmount'
        },
        {
            type: 'float',
            name: 'LastDuePerUnit'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.LastDuePerUnit;
            },
            name: 'LastDueTotal'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.LastDuePerUnit;
            },
            name: 'LastDueEqualTo'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.LastDuePerUnit * 7 / 100;
            },
            name: 'LastDueVatAmount'
        },
        {
            type: 'float',
            name: 'NetRate'
        },
        {
            type: 'float',
            name: 'GrossRate'
        },
        {
            type: 'float',
            name: 'GrossRateAccount'
        },
        {
            type: 'float',
            name: 'AverageLife'
        },
        {
            type: 'float',
            name: 'RentalMA'
        },
        {
            type: 'float',
            name: 'NumberPayment'
        },
        {
            type: 'date',
            name: 'FirstDueDate'
        },
        {
            type: 'date',
            name: 'LastDueDate'
        },
        {
            type: 'date',
            name: 'RVDueDate'
        },
        {
            type: 'float',
            name: 'ResidualValuePerUnit'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.ResidualValuePerUnit;
            },
            name: 'ResidualValueTotal'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.ResidualValuePerUnit;
            },
            name: 'ResidualValueEqualTo'
        },
        {
            type: 'date',
            name: 'RVDueDateOriginal'
        },
        {
            type: 'float',
            name: 'PercentEQ'
        },
        {
            type: 'float',
            name: 'TotalReceivablePerUnit'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.TotalReceivablePerUnit;
            },
            name: 'TotalReceivableTotal'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.TotalReceivablePerUnit;
            },
            name: 'TotalReceivableEqualTo'
        },
        {
            type: 'float',
            name: 'TotalUnearnedPerUnit'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.TotalUnearnedPerUnit;
            },
            name: 'TotalUnearnedTotal'
        },
        {
            type: 'float',
            calculate: function (data) {
                return data.TotalUnearnedPerUnit;
            },
            name: 'TotalUnearnedEqualTo'
        }
    ]
});